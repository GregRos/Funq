Test,Target,Time,Target_InitialSize,Iterations,DataSource_Size,DataSource_Type,Target_InitialGenerator,DataGenerator,Description,Class,Ratio
AddFirst,FunqList,2.293,10000,10000,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (1, 4)]","",Adds arbitrary items repeatedly to the beginning of the sequence.,DequeSingle,
AddLast,FunqList,2.511,10000,10000,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (1, 4)]","","",DequeSingle,
DropLast,FunqList,1.191,10000,10000,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (1, 4)]","","",DequeSingle,
DropFirst,FunqList,1.210,10000,10000,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (1, 4)]","","",DequeSingle,
Insert,FunqList,23.953,10000,10000,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (1, 4)]","","",IndexingSingle,
Remove,FunqList,16.825,10000,10000,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (1, 4)]","","",IndexingSingle,
Update,FunqList,13.001,10000,10000,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (1, 4)]","",Randomly updates items by index from the entire collection.,IndexingSingle,
IEnumerator,FunqList,0.507,10000,10000,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (1, 4)]","","",Iteration,
Lookup,FunqList,2.158,10000,10000,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (1, 4)]","",Randomly looks up {iters} items by index from the entire collection.,IndexingSingle,
AddLastRange,FunqList,10.664,10000,5,10000,Array,"[Name = ""Integers by Length""; ElementType = System.Int32; Range = (1, 4)]","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (1, 4)]",Adds a collection of items to the end {iters} times.,DequeRange,
AddFirstRange,FunqList,10.225,10000,5,10000,Array,"[Name = ""Integers by Length""; ElementType = System.Int32; Range = (1, 4)]","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (1, 4)]",Adds a collection of items to the beginning {iters} times.,DequeRange,
Insert Range,FunqList,10.321,10000,5,10000,Array,"[Name = ""Integers by Length""; ElementType = System.Int32; Range = (1, 4)]","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (1, 4)]","",IndexingRange,
AddLastRange (concat operation),FunqList,0.022,10000,5,10000,FunqList,"[Name = ""Integers by Length""; ElementType = System.Int32; Range = (1, 4)]","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (1, 4)]",Adds a collection of items to the end {iters} times.,DequeRange,
AddFirstRange (concat operation),FunqList,0.021,10000,5,10000,FunqList,"[Name = ""Integers by Length""; ElementType = System.Int32; Range = (1, 4)]","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (1, 4)]",Adds a collection of items to the beginning {iters} times.,DequeRange,
Insert Range (concat operation),FunqList,0.051,10000,5,10000,FunqList,"[Name = ""Integers by Length""; ElementType = System.Int32; Range = (1, 4)]","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (1, 4)]","",IndexingRange,
Take,FunqList,0.017,10000,5,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (1, 4)]","","Returns a starting subsequence consisting of a random number of items (from the entire collection), {iters} times.",Subsequence,
Skip,FunqList,0.017,10000,5,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (1, 4)]","","",Subsequence,
Iterate,FunqList,0.124,10000,1,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (1, 4)]","","",Iteration,
AddLast,FunqVector,3.858,10000,10000,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (1, 4)]","","",DequeSingle,
DropLast,FunqVector,3.260,10000,10000,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (1, 4)]","","",DequeSingle,
IEnumerator,FunqVector,0.247,10000,10000,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (1, 4)]","","",Iteration,
Lookup,FunqVector,0.170,10000,10000,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (1, 4)]","",Randomly looks up {iters} items by index from the entire collection.,IndexingSingle,
Update,FunqVector,3.939,10000,10000,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (1, 4)]","",Randomly updates items by index from the entire collection.,IndexingSingle,
AddLastRange,FunqVector,0.428,10000,5,10000,Array,"[Name = ""Integers by Length""; ElementType = System.Int32; Range = (1, 4)]","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (1, 4)]",Adds a collection of items to the end {iters} times.,DequeRange,
AddFirstRange,FunqVector,0.347,10000,5,10000,Array,"[Name = ""Integers by Length""; ElementType = System.Int32; Range = (1, 4)]","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (1, 4)]",Adds a collection of items to the beginning {iters} times.,DequeRange,
Insert Range,FunqVector,0.702,10000,5,10000,Array,"[Name = ""Integers by Length""; ElementType = System.Int32; Range = (1, 4)]","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (1, 4)]","",IndexingRange,
AddLastRange (concat operation),FunqVector,0.657,10000,5,10000,FunqVector,"[Name = ""Integers by Length""; ElementType = System.Int32; Range = (1, 4)]","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (1, 4)]",Adds a collection of items to the end {iters} times.,DequeRange,
AddFirstRange (concat operation),FunqVector,0.699,10000,5,10000,FunqVector,"[Name = ""Integers by Length""; ElementType = System.Int32; Range = (1, 4)]","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (1, 4)]",Adds a collection of items to the beginning {iters} times.,DequeRange,
Insert Range (concat operation),FunqVector,0.980,10000,5,10000,FunqVector,"[Name = ""Integers by Length""; ElementType = System.Int32; Range = (1, 4)]","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (1, 4)]","",IndexingRange,
Take,FunqVector,0.003,10000,5,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (1, 4)]","","Returns a starting subsequence consisting of a random number of items (from the entire collection), {iters} times.",Subsequence,
Iterate,FunqVector,0.032,10000,1,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (1, 4)]","","",Iteration,
AddFirst,System.ImmutableList,9.581,10000,10000,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (1, 4)]","",Adds arbitrary items repeatedly to the beginning of the sequence.,DequeSingle,
AddLast,System.ImmutableList,10.248,10000,10000,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (1, 4)]","","",DequeSingle,
IEnumerator,System.ImmutableList,2.143,10000,10000,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (1, 4)]","","",Iteration,
DropFirst,System.ImmutableList,5.196,10000,10000,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (1, 4)]","","",DequeSingle,
DropLast,System.ImmutableList,5.071,10000,10000,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (1, 4)]","","",DequeSingle,
Insert,System.ImmutableList,14.055,10000,10000,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (1, 4)]","","",IndexingSingle,
Remove,System.ImmutableList,9.635,10000,10000,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (1, 4)]","","",IndexingSingle,
Update,System.ImmutableList,6.475,10000,10000,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (1, 4)]","",Randomly updates items by index from the entire collection.,IndexingSingle,
Lookup,System.ImmutableList,1.643,10000,10000,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (1, 4)]","",Randomly looks up {iters} items by index from the entire collection.,IndexingSingle,
AddLastRange (concat operation),System.ImmutableList,46.156,10000,5,10000,System.ImmutableList,"[Name = ""Integers by Length""; ElementType = System.Int32; Range = (1, 4)]","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (1, 4)]",Adds a collection of items to the end {iters} times.,DequeRange,
AddFirstRange (concat operation),System.ImmutableList,44.614,10000,5,10000,System.ImmutableList,"[Name = ""Integers by Length""; ElementType = System.Int32; Range = (1, 4)]","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (1, 4)]",Adds a collection of items to the beginning {iters} times.,DequeRange,
Insert Range (concat operation),System.ImmutableList,49.087,10000,5,10000,System.ImmutableList,"[Name = ""Integers by Length""; ElementType = System.Int32; Range = (1, 4)]","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (1, 4)]","",IndexingRange,
AddLastRange,System.ImmutableList,35.912,10000,5,10000,Array,"[Name = ""Integers by Length""; ElementType = System.Int32; Range = (1, 4)]","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (1, 4)]",Adds a collection of items to the end {iters} times.,DequeRange,
AddFirstRange,System.ImmutableList,30.084,10000,5,10000,Array,"[Name = ""Integers by Length""; ElementType = System.Int32; Range = (1, 4)]","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (1, 4)]",Adds a collection of items to the beginning {iters} times.,DequeRange,
Insert Range,System.ImmutableList,37.871,10000,5,10000,Array,"[Name = ""Integers by Length""; ElementType = System.Int32; Range = (1, 4)]","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (1, 4)]","",IndexingRange,
Take,System.ImmutableList,5.249,10000,5,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (1, 4)]","","Returns a starting subsequence consisting of a random number of items (from the entire collection), {iters} times.",Subsequence,
Skip,System.ImmutableList,2.974,10000,5,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (1, 4)]","","",Subsequence,
Iterate,System.ImmutableList,2.659,10000,1,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (1, 4)]","","",Iteration,
AddFirst,FSharpx.Deque,0.662,10000,10000,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (1, 4)]","",Adds arbitrary items repeatedly to the beginning of the sequence.,DequeSingle,
AddLast,FSharpx.Deque,0.596,10000,10000,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (1, 4)]","","",DequeSingle,
IEnumerator,FSharpx.Deque,0.281,10000,10000,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (1, 4)]","","",Iteration,
DropLast,FSharpx.Deque,1.650,10000,10000,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (1, 4)]","","",DequeSingle,
DropFirst,FSharpx.Deque,0.704,10000,10000,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (1, 4)]","","",DequeSingle,
AddLastRange,FSharpx.Deque,5.783,10000,5,10000,Array,"[Name = ""Integers by Length""; ElementType = System.Int32; Range = (1, 4)]","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (1, 4)]",Adds a collection of items to the end {iters} times.,DequeRange,
AddFirstRange,FSharpx.Deque,5.596,10000,5,10000,Array,"[Name = ""Integers by Length""; ElementType = System.Int32; Range = (1, 4)]","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (1, 4)]",Adds a collection of items to the beginning {iters} times.,DequeRange,
AddLastRange (concat operation),FSharpx.Deque,7.724,10000,5,10000,FSharpx.Deque,"[Name = ""Integers by Length""; ElementType = System.Int32; Range = (1, 4)]","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (1, 4)]",Adds a collection of items to the end {iters} times.,DequeRange,
AddFirstRange (concat operation),FSharpx.Deque,6.503,10000,5,10000,FSharpx.Deque,"[Name = ""Integers by Length""; ElementType = System.Int32; Range = (1, 4)]","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (1, 4)]",Adds a collection of items to the beginning {iters} times.,DequeRange,
Iterate,FSharpx.Deque,0.347,10000,1,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (1, 4)]","","",Iteration,
AddLast,FSharpx.Vector,2.235,10000,10000,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (1, 4)]","","",DequeSingle,
DropLast,FSharpx.Vector,5.822,10000,10000,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (1, 4)]","","",DequeSingle,
IEnumerator,FSharpx.Vector,0.214,10000,10000,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (1, 4)]","","",Iteration,
Lookup,FSharpx.Vector,0.427,10000,10000,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (1, 4)]","",Randomly looks up {iters} items by index from the entire collection.,IndexingSingle,
Update,FSharpx.Vector,7.377,10000,10000,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (1, 4)]","",Randomly updates items by index from the entire collection.,IndexingSingle,
AddLastRange,FSharpx.Vector,20.783,10000,5,10000,Array,"[Name = ""Integers by Length""; ElementType = System.Int32; Range = (1, 4)]","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (1, 4)]",Adds a collection of items to the end {iters} times.,DequeRange,
AddLastRange (concat operation),FSharpx.Vector,21.102,10000,5,10000,FSharpx.Vector,"[Name = ""Integers by Length""; ElementType = System.Int32; Range = (1, 4)]","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (1, 4)]",Adds a collection of items to the end {iters} times.,DequeRange,
AddFirstRange (concat operation),FSharpx.Vector,21.130,10000,5,10000,FSharpx.Vector,"[Name = ""Integers by Length""; ElementType = System.Int32; Range = (1, 4)]","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (1, 4)]",Adds a collection of items to the beginning {iters} times.,DequeRange,
Iterate,FSharpx.Vector,0.318,10000,1,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (1, 4)]","","",Iteration,
Union,System.ImmutableSet,101.932,10000,5,10000,System.ImmutableSet,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]",Computes the set-theoretic union with another data structure {iters} times.,SetOperation,
Intersection,System.ImmutableSet,44.859,10000,5,10000,System.ImmutableSet,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]",Computes the set-theoretic intersection with another data structure {iters} times.,SetOperation,
Except,System.ImmutableSet,48.708,10000,5,10000,System.ImmutableSet,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]",Computes the set-theoretic relative complement (or Except) operation.,SetOperation,
Difference,System.ImmutableSet,227.732,10000,5,10000,System.ImmutableSet,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]",Computes the set-theoretic symmetric difference operation.,SetOperation,
IsProperSubset,System.ImmutableSet,34.642,10000,5,10000,System.ImmutableSet,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]",Determines the Subset relation.,SetRelation,
IsProperSuperset,System.ImmutableSet,0.012,10000,5,10000,System.ImmutableSet,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]",Determines the Superset relation.,SetRelation,
SetEquals,System.ImmutableSet,35.422,10000,5,10000,System.ImmutableSet,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","Determines if this set equals another data structure, {iters} times.",SetRelation,
Add,System.ImmutableSet,20.970,10000,5,10000,Array,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","",SetSingle,
Contains,System.ImmutableSet,3.636,10000,10000,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","Determines if a random element of the set is part of it, {iters} times.",SetSingle,
Drop,System.ImmutableSet,18.307,10000,10000,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","",SetSingle,
IEnumerator,System.ImmutableSet,4.571,10000,10000,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","",Iteration,
AddRange,System.ImmutableSet,16.024,10000,5,10000,Array,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","",SetRange,
DropRange,System.ImmutableSet,21.222,10000,5,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","",SetRange,Some(0.3)
Iterate,System.ImmutableSet,5.871,10000,1,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","",Iteration,
Union,FSharp.Set,55.977,10000,5,10000,FSharp.Set,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]",Computes the set-theoretic union with another data structure {iters} times.,SetOperation,
Intersection,FSharp.Set,28.234,10000,5,10000,FSharp.Set,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]",Computes the set-theoretic intersection with another data structure {iters} times.,SetOperation,
Except,FSharp.Set,113.700,10000,5,10000,FSharp.Set,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]",Computes the set-theoretic relative complement (or Except) operation.,SetOperation,
Difference,FSharp.Set,281.818,10000,5,10000,FSharp.Set,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]",Computes the set-theoretic symmetric difference operation.,SetOperation,
IsProperSubset,FSharp.Set,0.003,10000,5,10000,FSharp.Set,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]",Determines the Subset relation.,SetRelation,
IsProperSuperset,FSharp.Set,0.004,10000,5,10000,FSharp.Set,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]",Determines the Superset relation.,SetRelation,
SetEquals,FSharp.Set,0.014,10000,5,10000,FSharp.Set,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","Determines if this set equals another data structure, {iters} times.",SetRelation,
Add,FSharp.Set,106.085,10000,5,10000,Array,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","",SetSingle,
Contains,FSharp.Set,4.359,10000,10000,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","Determines if a random element of the set is part of it, {iters} times.",SetSingle,
Drop,FSharp.Set,15.775,10000,10000,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","",SetSingle,
IEnumerator,FSharp.Set,0.987,10000,10000,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","",Iteration,
AddRange,FSharp.Set,105.104,10000,5,10000,Array,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","",SetRange,
DropRange,FSharp.Set,32.639,10000,5,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","",SetRange,Some(0.3)
Iterate,FSharp.Set,1.065,10000,1,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","",Iteration,
Union,FunqSet,62.634,10000,5,10000,FunqSet,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]",Computes the set-theoretic union with another data structure {iters} times.,SetOperation,
Intersection,FunqSet,29.936,10000,5,10000,FunqSet,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]",Computes the set-theoretic intersection with another data structure {iters} times.,SetOperation,
Except,FunqSet,48.020,10000,5,10000,FunqSet,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]",Computes the set-theoretic relative complement (or Except) operation.,SetOperation,
Difference,FunqSet,167.971,10000,5,10000,FunqSet,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]",Computes the set-theoretic symmetric difference operation.,SetOperation,
IsProperSubset,FunqSet,0.002,10000,5,10000,FunqSet,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]",Determines the Subset relation.,SetRelation,
IsProperSuperset,FunqSet,0.001,10000,5,10000,FunqSet,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]",Determines the Superset relation.,SetRelation,
SetEquals,FunqSet,0.008,10000,5,10000,FunqSet,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","Determines if this set equals another data structure, {iters} times.",SetRelation,
Add,FunqSet,18.039,10000,5,10000,Array,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","",SetSingle,
Contains,FunqSet,2.827,10000,10000,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","Determines if a random element of the set is part of it, {iters} times.",SetSingle,
Drop,FunqSet,10.374,10000,10000,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","",SetSingle,
IEnumerator,FunqSet,2.066,10000,10000,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","",Iteration,
AddRange,FunqSet,14.284,10000,5,10000,Array,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","",SetRange,
DropRange,FunqSet,14.371,10000,5,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","",SetRange,Some(0.3)
Iterate,FunqSet,0.768,10000,1,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","",Iteration,
Union,FunqOrderedSet,38.132,10000,5,10000,FunqOrderedSet,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]",Computes the set-theoretic union with another data structure {iters} times.,SetOperation,
Intersection,FunqOrderedSet,37.325,10000,5,10000,FunqOrderedSet,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]",Computes the set-theoretic intersection with another data structure {iters} times.,SetOperation,
Except,FunqOrderedSet,34.971,10000,5,10000,FunqOrderedSet,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]",Computes the set-theoretic relative complement (or Except) operation.,SetOperation,
Difference,FunqOrderedSet,122.116,10000,5,10000,FunqOrderedSet,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]",Computes the set-theoretic symmetric difference operation.,SetOperation,
IsProperSubset,FunqOrderedSet,0.000,10000,5,10000,FunqOrderedSet,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]",Determines the Subset relation.,SetRelation,
IsProperSuperset,FunqOrderedSet,0.000,10000,5,10000,FunqOrderedSet,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]",Determines the Superset relation.,SetRelation,
SetEquals,FunqOrderedSet,0.018,10000,5,10000,FunqOrderedSet,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","Determines if this set equals another data structure, {iters} times.",SetRelation,
Add,FunqOrderedSet,23.794,10000,5,10000,Array,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","",SetSingle,
Contains,FunqOrderedSet,3.595,10000,10000,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","Determines if a random element of the set is part of it, {iters} times.",SetSingle,
Drop,FunqOrderedSet,18.431,10000,10000,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","",SetSingle,
IEnumerator,FunqOrderedSet,1.455,10000,10000,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","",Iteration,
AddRange,FunqOrderedSet,22.184,10000,5,10000,Array,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","",SetRange,
DropRange,FunqOrderedSet,15.651,10000,5,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","",SetRange,Some(0.3)
Iterate,FunqOrderedSet,0.537,10000,1,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","",Iteration,
Union,System.ImmutableSortedSet,186.335,10000,5,10000,System.ImmutableSortedSet,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]",Computes the set-theoretic union with another data structure {iters} times.,SetOperation,
Intersection,System.ImmutableSortedSet,142.322,10000,5,10000,System.ImmutableSortedSet,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]",Computes the set-theoretic intersection with another data structure {iters} times.,SetOperation,
Except,System.ImmutableSortedSet,155.025,10000,5,10000,System.ImmutableSortedSet,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]",Computes the set-theoretic relative complement (or Except) operation.,SetOperation,
Difference,System.ImmutableSortedSet,Timed Out,10000,5,10000,System.ImmutableSortedSet,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]",Computes the set-theoretic symmetric difference operation.,SetOperation,
IsProperSubset,System.ImmutableSortedSet,135.462,10000,5,10000,System.ImmutableSortedSet,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]",Determines the Subset relation.,SetRelation,
IsProperSuperset,System.ImmutableSortedSet,0.030,10000,5,10000,System.ImmutableSortedSet,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]",Determines the Superset relation.,SetRelation,
SetEquals,System.ImmutableSortedSet,119.768,10000,5,10000,System.ImmutableSortedSet,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","Determines if this set equals another data structure, {iters} times.",SetRelation,
Add,System.ImmutableSortedSet,123.888,10000,5,10000,Array,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","",SetSingle,
Contains,System.ImmutableSortedSet,22.831,10000,10000,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","Determines if a random element of the set is part of it, {iters} times.",SetSingle,
Drop,System.ImmutableSortedSet,30.655,10000,10000,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","",SetSingle,
IEnumerator,System.ImmutableSortedSet,3.284,10000,10000,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","",Iteration,
AddRange,System.ImmutableSortedSet,121.879,10000,5,10000,Array,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","",SetRange,
DropRange,System.ImmutableSortedSet,46.786,10000,5,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","",SetRange,Some(0.3)
Iterate,System.ImmutableSortedSet,4.241,10000,1,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","",Iteration,
Lookup,FunqMap,2.705,10000,10000,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","",MapSingle,
IEnumerator,FunqMap,1.535,10000,10000,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","",Iteration,
DropKey,FunqMap,15.140,10000,10000,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","",MapSingle,
Add,FunqMap,143.599,10000,5,10000,Array,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","",MapSingle,
Iterate,FunqMap,0.623,10000,1,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","",Iteration,
AddRange,FunqMap,68.350,10000,5,10000,Array,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.Collections.Generic.KeyValuePair`2[System.String,System.String]]","",MapRange,
DropRange,FunqMap,13.424,10000,5,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","",MapRange,Some(0.3)
Lookup,System.ImmutableDict,3.824,10000,10000,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","",MapSingle,
IEnumerator,System.ImmutableDict,5.096,10000,10000,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","",Iteration,
DropKey,System.ImmutableDict,25.384,10000,10000,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","",MapSingle,
Add,System.ImmutableDict,174.671,10000,5,10000,Array,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","",MapSingle,
Iterate,System.ImmutableDict,5.903,10000,1,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","",Iteration,
AddRange,System.ImmutableDict,89.446,10000,5,10000,Array,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.Collections.Generic.KeyValuePair`2[System.String,System.String]]","",MapRange,
DropRange,System.ImmutableDict,21.907,10000,5,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","",MapRange,Some(0.3)
Lookup,FSharp.Map,4.881,10000,10000,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","",MapSingle,
IEnumerator,FSharp.Map,1.003,10000,10000,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","",Iteration,
DropKey,FSharp.Map,20.601,10000,10000,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","",MapSingle,
Add,FSharp.Map,147.809,10000,5,10000,Array,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","",MapSingle,
Iterate,FSharp.Map,1.401,10000,1,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","",Iteration,
AddRange,FSharp.Map,166.362,10000,5,10000,Array,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.Collections.Generic.KeyValuePair`2[System.String,System.String]]","",MapRange,
DropRange,FSharp.Map,33.802,10000,5,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","",MapRange,Some(0.3)
Lookup,System.ImmutableSortedDict,22.643,10000,10000,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","",MapSingle,
IEnumerator,System.ImmutableSortedDict,2.715,10000,10000,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","",Iteration,
DropKey,System.ImmutableSortedDict,37.887,10000,10000,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","",MapSingle,
Add,System.ImmutableSortedDict,282.238,10000,5,10000,Array,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","",MapSingle,
Iterate,System.ImmutableSortedDict,5.800,10000,1,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","",Iteration,
AddRange,System.ImmutableSortedDict,205.355,10000,5,10000,Array,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.Collections.Generic.KeyValuePair`2[System.String,System.String]]","",MapRange,
DropRange,System.ImmutableSortedDict,46.796,10000,5,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","",MapRange,Some(0.3)
Lookup,FunqOrderedMap,3.778,10000,10000,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","",MapSingle,
IEnumerator,FunqOrderedMap,1.120,10000,10000,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","",Iteration,
DropKey,FunqOrderedMap,30.477,10000,10000,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","",MapSingle,
Add,FunqOrderedMap,181.727,10000,5,10000,Array,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","",MapSingle,
Iterate,FunqOrderedMap,0.573,10000,1,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","",Iteration,
AddRange,FunqOrderedMap,72.854,10000,5,10000,Array,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.Collections.Generic.KeyValuePair`2[System.String,System.String]]","",MapRange,
DropRange,FunqOrderedMap,15.144,10000,5,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","",MapRange,Some(0.3)
