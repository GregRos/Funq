Test,Target,Time,Target_InitialSize,Iterations,DataSource_Size,DataSource_Type,Target_InitialGenerator,DataGenerator,Description,Class,Ratio
AddFirst,FunqList,1.591,5000,5000,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (1, 4)]","",Adds arbitrary items repeatedly to the beginning of the sequence.,DequeSingle,
AddLast,FunqList,1.494,5000,5000,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (1, 4)]","","",DequeSingle,
RemoveLast,FunqList,0.968,5000,5000,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (1, 4)]","","",DequeSingle,
RemoveFirst,FunqList,0.941,5000,5000,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (1, 4)]","","",DequeSingle,
Insert,FunqList,9.616,5000,5000,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (1, 4)]","","",IndexingSingle,
Remove,FunqList,5.740,5000,5000,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (1, 4)]","","",IndexingSingle,
Update,FunqList,4.223,5000,5000,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (1, 4)]","",Randomly updates items by index from the entire collection.,IndexingSingle,
IEnumerator,FunqList,0.203,5000,5000,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (1, 4)]","","",Iteration,
Lookup,FunqList,0.773,5000,5000,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (1, 4)]","",Randomly looks up {iters} items by index from the entire collection.,IndexingSingle,
AddLastRange,FunqList,1.841,5000,3,5000,Array,"[Name = ""Integers by Length""; ElementType = System.Int32; Range = (1, 4)]","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (1, 4)]",Adds a collection of items to the end {iters} times.,DequeRange,
AddFirstRange,FunqList,2.019,5000,3,5000,Array,"[Name = ""Integers by Length""; ElementType = System.Int32; Range = (1, 4)]","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (1, 4)]",Adds a collection of items to the beginning {iters} times.,DequeRange,
Insert Range,FunqList,1.988,5000,3,5000,Array,"[Name = ""Integers by Length""; ElementType = System.Int32; Range = (1, 4)]","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (1, 4)]","",IndexingRange,
AddLastRange (concat),FunqList,0.007,5000,3,5000,FunqList,"[Name = ""Integers by Length""; ElementType = System.Int32; Range = (1, 4)]","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (1, 4)]",Adds a collection of items to the end {iters} times.,DequeRange,
AddFirstRange (concat),FunqList,0.006,5000,3,5000,FunqList,"[Name = ""Integers by Length""; ElementType = System.Int32; Range = (1, 4)]","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (1, 4)]",Adds a collection of items to the beginning {iters} times.,DequeRange,
Insert Range (concat),FunqList,0.017,5000,3,5000,FunqList,"[Name = ""Integers by Length""; ElementType = System.Int32; Range = (1, 4)]","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (1, 4)]","",IndexingRange,
Take,FunqList,0.007,5000,3,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (1, 4)]","","Returns a starting subsequence consisting of a random number of items (from the entire collection), {iters} times.",Subsequence,
Skip,FunqList,0.010,5000,3,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (1, 4)]","","",Subsequence,
Iterate,FunqList,0.067,5000,1,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (1, 4)]","","",Iteration,
AddLast,FunqVector,1.426,5000,5000,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (1, 4)]","","",DequeSingle,
RemoveLast,FunqVector,1.694,5000,5000,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (1, 4)]","","",DequeSingle,
IEnumerator,FunqVector,0.081,5000,5000,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (1, 4)]","","",Iteration,
Lookup,FunqVector,0.083,5000,5000,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (1, 4)]","",Randomly looks up {iters} items by index from the entire collection.,IndexingSingle,
Update,FunqVector,1.938,5000,5000,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (1, 4)]","",Randomly updates items by index from the entire collection.,IndexingSingle,
AddLastRange,FunqVector,0.116,5000,3,5000,Array,"[Name = ""Integers by Length""; ElementType = System.Int32; Range = (1, 4)]","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (1, 4)]",Adds a collection of items to the end {iters} times.,DequeRange,
AddFirstRange,FunqVector,0.093,5000,3,5000,Array,"[Name = ""Integers by Length""; ElementType = System.Int32; Range = (1, 4)]","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (1, 4)]",Adds a collection of items to the beginning {iters} times.,DequeRange,
Insert Range,FunqVector,0.351,5000,3,5000,Array,"[Name = ""Integers by Length""; ElementType = System.Int32; Range = (1, 4)]","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (1, 4)]","",IndexingRange,
AddLastRange (concat),FunqVector,0.294,5000,3,5000,FunqVector,"[Name = ""Integers by Length""; ElementType = System.Int32; Range = (1, 4)]","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (1, 4)]",Adds a collection of items to the end {iters} times.,DequeRange,
AddFirstRange (concat),FunqVector,0.215,5000,3,5000,FunqVector,"[Name = ""Integers by Length""; ElementType = System.Int32; Range = (1, 4)]","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (1, 4)]",Adds a collection of items to the beginning {iters} times.,DequeRange,
Insert Range (concat),FunqVector,0.511,5000,3,5000,FunqVector,"[Name = ""Integers by Length""; ElementType = System.Int32; Range = (1, 4)]","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (1, 4)]","",IndexingRange,
Take,FunqVector,0.001,5000,3,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (1, 4)]","","Returns a starting subsequence consisting of a random number of items (from the entire collection), {iters} times.",Subsequence,
Skip,FunqVector,0.060,5000,3,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (1, 4)]","","",Subsequence,
Iterate,FunqVector,0.025,5000,1,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (1, 4)]","","",Iteration,
AddFirst,System.ImmutableList,3.648,5000,5000,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (1, 4)]","",Adds arbitrary items repeatedly to the beginning of the sequence.,DequeSingle,
AddLast,System.ImmutableList,3.718,5000,5000,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (1, 4)]","","",DequeSingle,
IEnumerator,System.ImmutableList,0.931,5000,5000,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (1, 4)]","","",Iteration,
RemoveFirst,System.ImmutableList,1.899,5000,5000,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (1, 4)]","","",DequeSingle,
RemoveLast,System.ImmutableList,1.893,5000,5000,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (1, 4)]","","",DequeSingle,
Insert,System.ImmutableList,5.008,5000,5000,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (1, 4)]","","",IndexingSingle,
Remove,System.ImmutableList,3.261,5000,5000,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (1, 4)]","","",IndexingSingle,
Update,System.ImmutableList,3.104,5000,5000,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (1, 4)]","",Randomly updates items by index from the entire collection.,IndexingSingle,
Lookup,System.ImmutableList,0.699,5000,5000,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (1, 4)]","",Randomly looks up {iters} items by index from the entire collection.,IndexingSingle,
AddLastRange (concat),System.ImmutableList,9.861,5000,3,5000,System.ImmutableList,"[Name = ""Integers by Length""; ElementType = System.Int32; Range = (1, 4)]","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (1, 4)]",Adds a collection of items to the end {iters} times.,DequeRange,
AddFirstRange (concat),System.ImmutableList,9.972,5000,3,5000,System.ImmutableList,"[Name = ""Integers by Length""; ElementType = System.Int32; Range = (1, 4)]","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (1, 4)]",Adds a collection of items to the beginning {iters} times.,DequeRange,
Insert Range (concat),System.ImmutableList,10.694,5000,3,5000,System.ImmutableList,"[Name = ""Integers by Length""; ElementType = System.Int32; Range = (1, 4)]","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (1, 4)]","",IndexingRange,
AddLastRange,System.ImmutableList,6.925,5000,3,5000,Array,"[Name = ""Integers by Length""; ElementType = System.Int32; Range = (1, 4)]","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (1, 4)]",Adds a collection of items to the end {iters} times.,DequeRange,
AddFirstRange,System.ImmutableList,6.595,5000,3,5000,Array,"[Name = ""Integers by Length""; ElementType = System.Int32; Range = (1, 4)]","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (1, 4)]",Adds a collection of items to the beginning {iters} times.,DequeRange,
Insert Range,System.ImmutableList,7.549,5000,3,5000,Array,"[Name = ""Integers by Length""; ElementType = System.Int32; Range = (1, 4)]","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (1, 4)]","",IndexingRange,
Take,System.ImmutableList,1.075,5000,3,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (1, 4)]","","Returns a starting subsequence consisting of a random number of items (from the entire collection), {iters} times.",Subsequence,
Skip,System.ImmutableList,0.999,5000,3,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (1, 4)]","","",Subsequence,
Iterate,System.ImmutableList,1.399,5000,1,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (1, 4)]","","",Iteration,
AddFirst,FSharpx.Deque,0.298,5000,5000,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (1, 4)]","",Adds arbitrary items repeatedly to the beginning of the sequence.,DequeSingle,
AddLast,FSharpx.Deque,0.275,5000,5000,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (1, 4)]","","",DequeSingle,
IEnumerator,FSharpx.Deque,0.129,5000,5000,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (1, 4)]","","",Iteration,
RemoveLast,FSharpx.Deque,0.712,5000,5000,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (1, 4)]","","",DequeSingle,
RemoveFirst,FSharpx.Deque,0.379,5000,5000,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (1, 4)]","","",DequeSingle,
AddLastRange,FSharpx.Deque,0.966,5000,3,5000,Array,"[Name = ""Integers by Length""; ElementType = System.Int32; Range = (1, 4)]","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (1, 4)]",Adds a collection of items to the end {iters} times.,DequeRange,
AddFirstRange,FSharpx.Deque,0.945,5000,3,5000,Array,"[Name = ""Integers by Length""; ElementType = System.Int32; Range = (1, 4)]","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (1, 4)]",Adds a collection of items to the beginning {iters} times.,DequeRange,
AddLastRange (concat),FSharpx.Deque,1.103,5000,3,5000,FSharpx.Deque,"[Name = ""Integers by Length""; ElementType = System.Int32; Range = (1, 4)]","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (1, 4)]",Adds a collection of items to the end {iters} times.,DequeRange,
AddFirstRange (concat),FSharpx.Deque,1.089,5000,3,5000,FSharpx.Deque,"[Name = ""Integers by Length""; ElementType = System.Int32; Range = (1, 4)]","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (1, 4)]",Adds a collection of items to the beginning {iters} times.,DequeRange,
Iterate,FSharpx.Deque,0.127,5000,1,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (1, 4)]","","",Iteration,
AddLast,FSharpx.Vector,0.888,5000,5000,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (1, 4)]","","",DequeSingle,
RemoveLast,FSharpx.Vector,2.348,5000,5000,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (1, 4)]","","",DequeSingle,
IEnumerator,FSharpx.Vector,0.095,5000,5000,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (1, 4)]","","",Iteration,
Lookup,FSharpx.Vector,0.147,5000,5000,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (1, 4)]","",Randomly looks up {iters} items by index from the entire collection.,IndexingSingle,
Update,FSharpx.Vector,2.817,5000,5000,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (1, 4)]","",Randomly updates items by index from the entire collection.,IndexingSingle,
AddLastRange,FSharpx.Vector,3.759,5000,3,5000,Array,"[Name = ""Integers by Length""; ElementType = System.Int32; Range = (1, 4)]","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (1, 4)]",Adds a collection of items to the end {iters} times.,DequeRange,
AddLastRange (concat),FSharpx.Vector,3.539,5000,3,5000,FSharpx.Vector,"[Name = ""Integers by Length""; ElementType = System.Int32; Range = (1, 4)]","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (1, 4)]",Adds a collection of items to the end {iters} times.,DequeRange,
AddFirstRange (concat),FSharpx.Vector,3.821,5000,3,5000,FSharpx.Vector,"[Name = ""Integers by Length""; ElementType = System.Int32; Range = (1, 4)]","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (1, 4)]",Adds a collection of items to the beginning {iters} times.,DequeRange,
Iterate,FSharpx.Vector,0.181,5000,1,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (1, 4)]","","",Iteration,
Union,System.ImmutableSet,32.325,5000,3,5000,System.ImmutableSet,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]",Computes the set-theoretic union with another data structure {iters} times.,SetOperation,
Intersection,System.ImmutableSet,9.289,5000,3,5000,System.ImmutableSet,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]",Computes the set-theoretic intersection with another data structure {iters} times.,SetOperation,
Except,System.ImmutableSet,16.688,5000,3,5000,System.ImmutableSet,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]",Computes the set-theoretic relative complement (or Except) operation.,SetOperation,
Difference,System.ImmutableSet,56.090,5000,3,5000,System.ImmutableSet,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]",Computes the set-theoretic symmetric difference operation.,SetOperation,
IsProperSubset,System.ImmutableSet,8.253,5000,3,5000,System.ImmutableSet,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]",Determines the Subset relation.,SetRelation,
IsProperSuperset,System.ImmutableSet,0.015,5000,3,5000,System.ImmutableSet,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]",Determines the Superset relation.,SetRelation,
SetEquals,System.ImmutableSet,8.981,5000,3,5000,System.ImmutableSet,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","Determines if this set equals another data structure, {iters} times.",SetRelation,
Add,System.ImmutableSet,4.882,5000,3,5000,Array,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","",SetSingle,
Contains,System.ImmutableSet,1.572,5000,5000,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","Determines if a random element of the set is part of it, {iters} times.",SetSingle,
Remove,System.ImmutableSet,6.380,5000,5000,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","",SetSingle,
IEnumerator,System.ImmutableSet,2.183,5000,5000,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","",Iteration,
AddRange,System.ImmutableSet,4.889,5000,3,5000,Array,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","",SetRange,
RemoveRange,System.ImmutableSet,9.736,5000,3,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","",SetRange,Some(0.6)
Iterate,System.ImmutableSet,2.685,5000,1,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","",Iteration,
Union,FSharp.Set,12.130,5000,3,5000,FSharp.Set,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]",Computes the set-theoretic union with another data structure {iters} times.,SetOperation,
Intersection,FSharp.Set,5.956,5000,3,5000,FSharp.Set,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]",Computes the set-theoretic intersection with another data structure {iters} times.,SetOperation,
Except,FSharp.Set,25.506,5000,3,5000,FSharp.Set,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]",Computes the set-theoretic relative complement (or Except) operation.,SetOperation,
Difference,FSharp.Set,70.169,5000,3,5000,FSharp.Set,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]",Computes the set-theoretic symmetric difference operation.,SetOperation,
IsProperSubset,FSharp.Set,0.002,5000,3,5000,FSharp.Set,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]",Determines the Subset relation.,SetRelation,
IsProperSuperset,FSharp.Set,0.003,5000,3,5000,FSharp.Set,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]",Determines the Superset relation.,SetRelation,
SetEquals,FSharp.Set,0.007,5000,3,5000,FSharp.Set,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","Determines if this set equals another data structure, {iters} times.",SetRelation,
Add,FSharp.Set,23.045,5000,3,5000,Array,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","",SetSingle,
Contains,FSharp.Set,1.658,5000,5000,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","Determines if a random element of the set is part of it, {iters} times.",SetSingle,
Remove,FSharp.Set,6.523,5000,5000,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","",SetSingle,
IEnumerator,FSharp.Set,0.664,5000,5000,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","",Iteration,
AddRange,FSharp.Set,22.860,5000,3,5000,Array,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","",SetRange,
RemoveRange,FSharp.Set,18.496,5000,3,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","",SetRange,Some(0.6)
Iterate,FSharp.Set,0.501,5000,1,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","",Iteration,
Union,FunqSet,6.048,5000,3,5000,FunqSet,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]",Computes the set-theoretic union with another data structure {iters} times.,SetOperation,
Intersection,FunqSet,4.692,5000,3,5000,FunqSet,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]",Computes the set-theoretic intersection with another data structure {iters} times.,SetOperation,
Except,FunqSet,4.232,5000,3,5000,FunqSet,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]",Computes the set-theoretic relative complement (or Except) operation.,SetOperation,
Difference,FunqSet,17.529,5000,3,5000,FunqSet,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]",Computes the set-theoretic symmetric difference operation.,SetOperation,
IsProperSubset,FunqSet,0.006,5000,3,5000,FunqSet,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]",Determines the Subset relation.,SetRelation,
IsProperSuperset,FunqSet,0.006,5000,3,5000,FunqSet,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]",Determines the Superset relation.,SetRelation,
SetEquals,FunqSet,0.006,5000,3,5000,FunqSet,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","Determines if this set equals another data structure, {iters} times.",SetRelation,
Add,FunqSet,3.900,5000,3,5000,Array,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","",SetSingle,
Contains,FunqSet,0.972,5000,5000,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","Determines if a random element of the set is part of it, {iters} times.",SetSingle,
Remove,FunqSet,3.210,5000,5000,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","",SetSingle,
IEnumerator,FunqSet,0.995,5000,5000,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","",Iteration,
AddRange,FunqSet,3.173,5000,3,5000,Array,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","",SetRange,
RemoveRange,FunqSet,5.601,5000,3,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","",SetRange,Some(0.6)
Iterate,FunqSet,0.154,5000,1,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","",Iteration,
Union,FunqOrderedSet,6.752,5000,3,5000,FunqOrderedSet,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]",Computes the set-theoretic union with another data structure {iters} times.,SetOperation,
Intersection,FunqOrderedSet,6.891,5000,3,5000,FunqOrderedSet,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]",Computes the set-theoretic intersection with another data structure {iters} times.,SetOperation,
Except,FunqOrderedSet,4.910,5000,3,5000,FunqOrderedSet,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]",Computes the set-theoretic relative complement (or Except) operation.,SetOperation,
Difference,FunqOrderedSet,13.262,5000,3,5000,FunqOrderedSet,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]",Computes the set-theoretic symmetric difference operation.,SetOperation,
IsProperSubset,FunqOrderedSet,0.005,5000,3,5000,FunqOrderedSet,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]",Determines the Subset relation.,SetRelation,
IsProperSuperset,FunqOrderedSet,0.011,5000,3,5000,FunqOrderedSet,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]",Determines the Superset relation.,SetRelation,
SetEquals,FunqOrderedSet,0.010,5000,3,5000,FunqOrderedSet,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","Determines if this set equals another data structure, {iters} times.",SetRelation,
Add,FunqOrderedSet,5.339,5000,3,5000,Array,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","",SetSingle,
Contains,FunqOrderedSet,1.423,5000,5000,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","Determines if a random element of the set is part of it, {iters} times.",SetSingle,
Remove,FunqOrderedSet,3.438,5000,5000,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","",SetSingle,
IEnumerator,FunqOrderedSet,0.524,5000,5000,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","",Iteration,
AddRange,FunqOrderedSet,4.827,5000,3,5000,Array,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","",SetRange,
RemoveRange,FunqOrderedSet,7.439,5000,3,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","",SetRange,Some(0.6)
Iterate,FunqOrderedSet,0.155,5000,1,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","",Iteration,
Union,System.ImmutableSortedSet,47.810,5000,3,5000,System.ImmutableSortedSet,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]",Computes the set-theoretic union with another data structure {iters} times.,SetOperation,
Intersection,System.ImmutableSortedSet,38.901,5000,3,5000,System.ImmutableSortedSet,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]",Computes the set-theoretic intersection with another data structure {iters} times.,SetOperation,
Except,System.ImmutableSortedSet,42.484,5000,3,5000,System.ImmutableSortedSet,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]",Computes the set-theoretic relative complement (or Except) operation.,SetOperation,
Difference,System.ImmutableSortedSet,205.380,5000,3,5000,System.ImmutableSortedSet,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]",Computes the set-theoretic symmetric difference operation.,SetOperation,
IsProperSubset,System.ImmutableSortedSet,64.637,5000,3,5000,System.ImmutableSortedSet,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]",Determines the Subset relation.,SetRelation,
IsProperSuperset,System.ImmutableSortedSet,0.027,5000,3,5000,System.ImmutableSortedSet,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]",Determines the Superset relation.,SetRelation,
SetEquals,System.ImmutableSortedSet,31.249,5000,3,5000,System.ImmutableSortedSet,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","Determines if this set equals another data structure, {iters} times.",SetRelation,
Add,System.ImmutableSortedSet,29.790,5000,3,5000,Array,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","",SetSingle,
Contains,System.ImmutableSortedSet,9.018,5000,5000,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","Determines if a random element of the set is part of it, {iters} times.",SetSingle,
Remove,System.ImmutableSortedSet,11.539,5000,5000,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","",SetSingle,
IEnumerator,System.ImmutableSortedSet,1.358,5000,5000,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","",Iteration,
AddRange,System.ImmutableSortedSet,31.057,5000,3,5000,Array,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","",SetRange,
RemoveRange,System.ImmutableSortedSet,20.449,5000,3,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","",SetRange,Some(0.6)
Iterate,System.ImmutableSortedSet,2.165,5000,1,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","",Iteration,
Lookup,FunqMap,1.266,5000,5000,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","",MapSingle,
IEnumerator,FunqMap,0.674,5000,5000,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","",Iteration,
RemoveKey,FunqMap,10.604,5000,5000,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","",MapSingle,
Add,FunqMap,47.416,5000,3,5000,Array,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","",MapSingle,
Iterate,FunqMap,0.246,5000,1,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","",Iteration,
AddRange,FunqMap,14.074,5000,3,5000,Array,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.Collections.Generic.KeyValuePair`2[System.String,System.String]]","",MapRange,
RemoveRange,FunqMap,5.999,5000,3,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","",MapRange,Some(0.6)
Lookup,System.ImmutableDict,1.386,5000,5000,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","",MapSingle,
IEnumerator,System.ImmutableDict,1.901,5000,5000,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","",Iteration,
RemoveKey,System.ImmutableDict,11.212,5000,5000,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","",MapSingle,
Add,System.ImmutableDict,40.843,5000,3,5000,Array,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","",MapSingle,
Iterate,System.ImmutableDict,2.507,5000,1,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","",Iteration,
AddRange,System.ImmutableDict,23.109,5000,3,5000,Array,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.Collections.Generic.KeyValuePair`2[System.String,System.String]]","",MapRange,
RemoveRange,System.ImmutableDict,9.246,5000,3,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","",MapRange,Some(0.6)
Lookup,FSharp.Map,1.899,5000,5000,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","",MapSingle,
IEnumerator,FSharp.Map,0.551,5000,5000,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","",Iteration,
RemoveKey,FSharp.Map,7.970,5000,5000,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","",MapSingle,
Add,FSharp.Map,34.458,5000,3,5000,Array,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","",MapSingle,
Iterate,FSharp.Map,0.577,5000,1,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","",Iteration,
AddRange,FSharp.Map,41.542,5000,3,5000,Array,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.Collections.Generic.KeyValuePair`2[System.String,System.String]]","",MapRange,
RemoveRange,FSharp.Map,14.887,5000,3,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","",MapRange,Some(0.6)
Lookup,System.ImmutableSortedDict,10.501,5000,5000,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","",MapSingle,
IEnumerator,System.ImmutableSortedDict,1.148,5000,5000,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","",Iteration,
RemoveKey,System.ImmutableSortedDict,13.800,5000,5000,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","",MapSingle,
Add,System.ImmutableSortedDict,53.783,5000,3,5000,Array,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","",MapSingle,
Iterate,System.ImmutableSortedDict,1.630,5000,1,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","",Iteration,
AddRange,System.ImmutableSortedDict,42.167,5000,3,5000,Array,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.Collections.Generic.KeyValuePair`2[System.String,System.String]]","",MapRange,
RemoveRange,System.ImmutableSortedDict,20.638,5000,3,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","",MapRange,Some(0.6)
Lookup,FunqOrderedMap,1.412,5000,5000,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","",MapSingle,
IEnumerator,FunqOrderedMap,0.642,5000,5000,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","",Iteration,
RemoveKey,FunqOrderedMap,14.092,5000,5000,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","",MapSingle,
Add,FunqOrderedMap,54.938,5000,3,5000,Array,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","",MapSingle,
Iterate,FunqOrderedMap,0.171,5000,1,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","",Iteration,
AddRange,FunqOrderedMap,14.870,5000,3,5000,Array,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.Collections.Generic.KeyValuePair`2[System.String,System.String]]","",MapRange,
RemoveRange,FunqOrderedMap,6.188,5000,3,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","",MapRange,Some(0.6)
