Test,Target,Time,Target_InitialSize,Iterations,DataSource_Size,DataSource_Type,Target_InitialGenerator,DataGenerator,Description,Class,Ratio
AddFirst,FunqList,2.745,10000,10000,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (1, 4)]","",Adds arbitrary items repeatedly to the beginning of the sequence.,DequeSingle,
AddLast,FunqList,2.232,10000,10000,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (1, 4)]","","",DequeSingle,
RemoveLast,FunqList,1.275,10000,10000,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (1, 4)]","","",DequeSingle,
RemoveFirst,FunqList,1.455,10000,10000,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (1, 4)]","","",DequeSingle,
Insert,FunqList,19.094,10000,10000,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (1, 4)]","","",IndexingSingle,
Remove,FunqList,12.989,10000,10000,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (1, 4)]","","",IndexingSingle,
Update,FunqList,9.457,10000,10000,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (1, 4)]","",Randomly updates items by index from the entire collection.,IndexingSingle,
IEnumerator,FunqList,0.402,10000,10000,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (1, 4)]","","",Iteration,
Lookup,FunqList,1.792,10000,10000,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (1, 4)]","",Randomly looks up {iters} items by index from the entire collection.,IndexingSingle,
AddLastRange,FunqList,7.909,10000,5,10000,Array,"[Name = ""Integers by Length""; ElementType = System.Int32; Range = (1, 4)]","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (1, 4)]",Adds a collection of items to the end {iters} times.,DequeRange,
AddFirstRange,FunqList,7.698,10000,5,10000,Array,"[Name = ""Integers by Length""; ElementType = System.Int32; Range = (1, 4)]","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (1, 4)]",Adds a collection of items to the beginning {iters} times.,DequeRange,
Insert Range,FunqList,8.090,10000,5,10000,Array,"[Name = ""Integers by Length""; ElementType = System.Int32; Range = (1, 4)]","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (1, 4)]","",IndexingRange,
AddLastRange (concat operation),FunqList,0.013,10000,5,10000,FunqList,"[Name = ""Integers by Length""; ElementType = System.Int32; Range = (1, 4)]","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (1, 4)]",Adds a collection of items to the end {iters} times.,DequeRange,
AddFirstRange (concat operation),FunqList,0.056,10000,5,10000,FunqList,"[Name = ""Integers by Length""; ElementType = System.Int32; Range = (1, 4)]","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (1, 4)]",Adds a collection of items to the beginning {iters} times.,DequeRange,
Insert Range (concat operation),FunqList,0.030,10000,5,10000,FunqList,"[Name = ""Integers by Length""; ElementType = System.Int32; Range = (1, 4)]","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (1, 4)]","",IndexingRange,
Take,FunqList,0.012,10000,5,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (1, 4)]","","Returns a starting subsequence consisting of a random number of items (from the entire collection), {iters} times.",Subsequence,
Skip,FunqList,0.011,10000,5,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (1, 4)]","","",Subsequence,
Iterate,FunqList,0.128,10000,1,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (1, 4)]","","",Iteration,
AddLast,FunqVector,2.794,10000,10000,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (1, 4)]","","",DequeSingle,
RemoveLast,FunqVector,2.466,10000,10000,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (1, 4)]","","",DequeSingle,
IEnumerator,FunqVector,0.201,10000,10000,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (1, 4)]","","",Iteration,
Lookup,FunqVector,0.136,10000,10000,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (1, 4)]","",Randomly looks up {iters} items by index from the entire collection.,IndexingSingle,
Update,FunqVector,2.969,10000,10000,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (1, 4)]","",Randomly updates items by index from the entire collection.,IndexingSingle,
AddLastRange,FunqVector,0.372,10000,5,10000,Array,"[Name = ""Integers by Length""; ElementType = System.Int32; Range = (1, 4)]","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (1, 4)]",Adds a collection of items to the end {iters} times.,DequeRange,
AddFirstRange,FunqVector,0.328,10000,5,10000,Array,"[Name = ""Integers by Length""; ElementType = System.Int32; Range = (1, 4)]","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (1, 4)]",Adds a collection of items to the beginning {iters} times.,DequeRange,
Insert Range,FunqVector,1.154,10000,5,10000,Array,"[Name = ""Integers by Length""; ElementType = System.Int32; Range = (1, 4)]","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (1, 4)]","",IndexingRange,
AddLastRange (concat operation),FunqVector,0.616,10000,5,10000,FunqVector,"[Name = ""Integers by Length""; ElementType = System.Int32; Range = (1, 4)]","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (1, 4)]",Adds a collection of items to the end {iters} times.,DequeRange,
AddFirstRange (concat operation),FunqVector,0.586,10000,5,10000,FunqVector,"[Name = ""Integers by Length""; ElementType = System.Int32; Range = (1, 4)]","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (1, 4)]",Adds a collection of items to the beginning {iters} times.,DequeRange,
Insert Range (concat operation),FunqVector,1.632,10000,5,10000,FunqVector,"[Name = ""Integers by Length""; ElementType = System.Int32; Range = (1, 4)]","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (1, 4)]","",IndexingRange,
Take,FunqVector,0.002,10000,5,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (1, 4)]","","Returns a starting subsequence consisting of a random number of items (from the entire collection), {iters} times.",Subsequence,
Skip,FunqVector,0.336,10000,5,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (1, 4)]","","",Subsequence,
Iterate,FunqVector,0.032,10000,1,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (1, 4)]","","",Iteration,
AddFirst,System.ImmutableList,9.023,10000,10000,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (1, 4)]","",Adds arbitrary items repeatedly to the beginning of the sequence.,DequeSingle,
AddLast,System.ImmutableList,8.703,10000,10000,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (1, 4)]","","",DequeSingle,
IEnumerator,System.ImmutableList,2.023,10000,10000,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (1, 4)]","","",Iteration,
RemoveFirst,System.ImmutableList,4.527,10000,10000,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (1, 4)]","","",DequeSingle,
RemoveLast,System.ImmutableList,4.573,10000,10000,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (1, 4)]","","",DequeSingle,
Insert,System.ImmutableList,13.756,10000,10000,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (1, 4)]","","",IndexingSingle,
Remove,System.ImmutableList,9.530,10000,10000,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (1, 4)]","","",IndexingSingle,
Update,System.ImmutableList,6.250,10000,10000,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (1, 4)]","",Randomly updates items by index from the entire collection.,IndexingSingle,
Lookup,System.ImmutableList,1.707,10000,10000,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (1, 4)]","",Randomly looks up {iters} items by index from the entire collection.,IndexingSingle,
AddLastRange (concat operation),System.ImmutableList,41.760,10000,5,10000,System.ImmutableList,"[Name = ""Integers by Length""; ElementType = System.Int32; Range = (1, 4)]","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (1, 4)]",Adds a collection of items to the end {iters} times.,DequeRange,
AddFirstRange (concat operation),System.ImmutableList,41.505,10000,5,10000,System.ImmutableList,"[Name = ""Integers by Length""; ElementType = System.Int32; Range = (1, 4)]","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (1, 4)]",Adds a collection of items to the beginning {iters} times.,DequeRange,
Insert Range (concat operation),System.ImmutableList,44.916,10000,5,10000,System.ImmutableList,"[Name = ""Integers by Length""; ElementType = System.Int32; Range = (1, 4)]","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (1, 4)]","",IndexingRange,
AddLastRange,System.ImmutableList,29.166,10000,5,10000,Array,"[Name = ""Integers by Length""; ElementType = System.Int32; Range = (1, 4)]","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (1, 4)]",Adds a collection of items to the end {iters} times.,DequeRange,
AddFirstRange,System.ImmutableList,28.433,10000,5,10000,Array,"[Name = ""Integers by Length""; ElementType = System.Int32; Range = (1, 4)]","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (1, 4)]",Adds a collection of items to the beginning {iters} times.,DequeRange,
Insert Range,System.ImmutableList,34.690,10000,5,10000,Array,"[Name = ""Integers by Length""; ElementType = System.Int32; Range = (1, 4)]","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (1, 4)]","",IndexingRange,
Take,System.ImmutableList,3.162,10000,5,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (1, 4)]","","Returns a starting subsequence consisting of a random number of items (from the entire collection), {iters} times.",Subsequence,
Skip,System.ImmutableList,5.365,10000,5,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (1, 4)]","","",Subsequence,
Iterate,System.ImmutableList,2.856,10000,1,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (1, 4)]","","",Iteration,
AddFirst,FSharpx.Deque,0.443,10000,10000,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (1, 4)]","",Adds arbitrary items repeatedly to the beginning of the sequence.,DequeSingle,
AddLast,FSharpx.Deque,2.525,10000,10000,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (1, 4)]","","",DequeSingle,
IEnumerator,FSharpx.Deque,0.216,10000,10000,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (1, 4)]","","",Iteration,
RemoveLast,FSharpx.Deque,2.044,10000,10000,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (1, 4)]","","",DequeSingle,
RemoveFirst,FSharpx.Deque,0.625,10000,10000,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (1, 4)]","","",DequeSingle,
AddLastRange,FSharpx.Deque,11.815,10000,5,10000,Array,"[Name = ""Integers by Length""; ElementType = System.Int32; Range = (1, 4)]","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (1, 4)]",Adds a collection of items to the end {iters} times.,DequeRange,
AddFirstRange,FSharpx.Deque,7.076,10000,5,10000,Array,"[Name = ""Integers by Length""; ElementType = System.Int32; Range = (1, 4)]","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (1, 4)]",Adds a collection of items to the beginning {iters} times.,DequeRange,
AddLastRange (concat operation),FSharpx.Deque,9.401,10000,5,10000,FSharpx.Deque,"[Name = ""Integers by Length""; ElementType = System.Int32; Range = (1, 4)]","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (1, 4)]",Adds a collection of items to the end {iters} times.,DequeRange,
AddFirstRange (concat operation),FSharpx.Deque,6.732,10000,5,10000,FSharpx.Deque,"[Name = ""Integers by Length""; ElementType = System.Int32; Range = (1, 4)]","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (1, 4)]",Adds a collection of items to the beginning {iters} times.,DequeRange,
Iterate,FSharpx.Deque,0.394,10000,1,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (1, 4)]","","",Iteration,
AddLast,FSharpx.Vector,2.387,10000,10000,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (1, 4)]","","",DequeSingle,
RemoveLast,FSharpx.Vector,6.541,10000,10000,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (1, 4)]","","",DequeSingle,
IEnumerator,FSharpx.Vector,0.175,10000,10000,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (1, 4)]","","",Iteration,
Lookup,FSharpx.Vector,0.508,10000,10000,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (1, 4)]","",Randomly looks up {iters} items by index from the entire collection.,IndexingSingle,
Update,FSharpx.Vector,7.089,10000,10000,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (1, 4)]","",Randomly updates items by index from the entire collection.,IndexingSingle,
AddLastRange,FSharpx.Vector,16.209,10000,5,10000,Array,"[Name = ""Integers by Length""; ElementType = System.Int32; Range = (1, 4)]","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (1, 4)]",Adds a collection of items to the end {iters} times.,DequeRange,
AddLastRange (concat operation),FSharpx.Vector,52.158,10000,5,10000,FSharpx.Vector,"[Name = ""Integers by Length""; ElementType = System.Int32; Range = (1, 4)]","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (1, 4)]",Adds a collection of items to the end {iters} times.,DequeRange,
AddFirstRange (concat operation),FSharpx.Vector,53.839,10000,5,10000,FSharpx.Vector,"[Name = ""Integers by Length""; ElementType = System.Int32; Range = (1, 4)]","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (1, 4)]",Adds a collection of items to the beginning {iters} times.,DequeRange,
Iterate,FSharpx.Vector,0.222,10000,1,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (1, 4)]","","",Iteration,
Union,System.ImmutableSet,110.071,10000,5,10000,System.ImmutableSet,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 15)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 15)]",Computes the set-theoretic union with another data structure {iters} times.,SetOperation,
Intersection,System.ImmutableSet,46.214,10000,5,10000,System.ImmutableSet,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 15)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 15)]",Computes the set-theoretic intersection with another data structure {iters} times.,SetOperation,
Except,System.ImmutableSet,43.001,10000,5,10000,System.ImmutableSet,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 15)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 15)]",Computes the set-theoretic relative complement (or Except) operation.,SetOperation,
Difference,System.ImmutableSet,216.680,10000,5,10000,System.ImmutableSet,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 15)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 15)]",Computes the set-theoretic symmetric difference operation.,SetOperation,
IsProperSubset,System.ImmutableSet,36.334,10000,5,10000,System.ImmutableSet,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 15)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 15)]",Determines the Subset relation.,SetRelation,
IsProperSuperset,System.ImmutableSet,0.012,10000,5,10000,System.ImmutableSet,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 15)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 15)]",Determines the Superset relation.,SetRelation,
SetEquals,System.ImmutableSet,33.154,10000,5,10000,System.ImmutableSet,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 15)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 15)]","Determines if this set equals another data structure, {iters} times.",SetRelation,
Add,System.ImmutableSet,22.286,10000,5,10000,Array,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 15)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 15)]","",SetSingle,
Contains,System.ImmutableSet,3.727,10000,10000,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 15)]","","Determines if a random element of the set is part of it, {iters} times.",SetSingle,
Remove,System.ImmutableSet,17.709,10000,10000,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 15)]","","",SetSingle,
IEnumerator,System.ImmutableSet,4.786,10000,10000,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 15)]","","",Iteration,
AddRange,System.ImmutableSet,15.490,10000,5,10000,Array,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 15)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 15)]","",SetRange,
RemoveRange,System.ImmutableSet,21.843,10000,5,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 15)]","","",SetRange,Some(0.3)
Iterate,System.ImmutableSet,5.523,10000,1,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 15)]","","",Iteration,
Union,FSharp.Set,64.586,10000,5,10000,FSharp.Set,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 15)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 15)]",Computes the set-theoretic union with another data structure {iters} times.,SetOperation,
Intersection,FSharp.Set,41.045,10000,5,10000,FSharp.Set,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 15)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 15)]",Computes the set-theoretic intersection with another data structure {iters} times.,SetOperation,
Except,FSharp.Set,103.395,10000,5,10000,FSharp.Set,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 15)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 15)]",Computes the set-theoretic relative complement (or Except) operation.,SetOperation,
Difference,FSharp.Set,259.198,10000,5,10000,FSharp.Set,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 15)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 15)]",Computes the set-theoretic symmetric difference operation.,SetOperation,
IsProperSubset,FSharp.Set,0.003,10000,5,10000,FSharp.Set,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 15)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 15)]",Determines the Subset relation.,SetRelation,
IsProperSuperset,FSharp.Set,0.003,10000,5,10000,FSharp.Set,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 15)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 15)]",Determines the Superset relation.,SetRelation,
SetEquals,FSharp.Set,0.012,10000,5,10000,FSharp.Set,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 15)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 15)]","Determines if this set equals another data structure, {iters} times.",SetRelation,
Add,FSharp.Set,109.657,10000,5,10000,Array,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 15)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 15)]","",SetSingle,
Contains,FSharp.Set,4.129,10000,10000,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 15)]","","Determines if a random element of the set is part of it, {iters} times.",SetSingle,
Remove,FSharp.Set,16.920,10000,10000,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 15)]","","",SetSingle,
IEnumerator,FSharp.Set,0.889,10000,10000,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 15)]","","",Iteration,
AddRange,FSharp.Set,123.066,10000,5,10000,Array,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 15)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 15)]","",SetRange,
RemoveRange,FSharp.Set,34.749,10000,5,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 15)]","","",SetRange,Some(0.3)
Iterate,FSharp.Set,1.003,10000,1,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 15)]","","",Iteration,
Union,FunqSet,24.482,10000,5,10000,FunqSet,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 15)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 15)]",Computes the set-theoretic union with another data structure {iters} times.,SetOperation,
Intersection,FunqSet,28.955,10000,5,10000,FunqSet,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 15)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 15)]",Computes the set-theoretic intersection with another data structure {iters} times.,SetOperation,
Except,FunqSet,22.630,10000,5,10000,FunqSet,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 15)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 15)]",Computes the set-theoretic relative complement (or Except) operation.,SetOperation,
Difference,FunqSet,59.012,10000,5,10000,FunqSet,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 15)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 15)]",Computes the set-theoretic symmetric difference operation.,SetOperation,
IsProperSubset,FunqSet,0.009,10000,5,10000,FunqSet,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 15)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 15)]",Determines the Subset relation.,SetRelation,
IsProperSuperset,FunqSet,0.013,10000,5,10000,FunqSet,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 15)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 15)]",Determines the Superset relation.,SetRelation,
SetEquals,FunqSet,0.029,10000,5,10000,FunqSet,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 15)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 15)]","Determines if this set equals another data structure, {iters} times.",SetRelation,
Add,FunqSet,22.460,10000,5,10000,Array,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 15)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 15)]","",SetSingle,
Contains,FunqSet,3.328,10000,10000,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 15)]","","Determines if a random element of the set is part of it, {iters} times.",SetSingle,
Remove,FunqSet,23.531,10000,10000,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 15)]","","",SetSingle,
IEnumerator,FunqSet,1.452,10000,10000,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 15)]","","",Iteration,
AddRange,FunqSet,31.744,10000,5,10000,Array,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 15)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 15)]","",SetRange,
RemoveRange,FunqSet,29.429,10000,5,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 15)]","","",SetRange,Some(0.3)
Iterate,FunqSet,0.686,10000,1,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 15)]","","",Iteration,
Union,FunqOrderedSet,36.535,10000,5,10000,FunqOrderedSet,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 15)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 15)]",Computes the set-theoretic union with another data structure {iters} times.,SetOperation,
Intersection,FunqOrderedSet,41.345,10000,5,10000,FunqOrderedSet,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 15)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 15)]",Computes the set-theoretic intersection with another data structure {iters} times.,SetOperation,
Except,FunqOrderedSet,30.229,10000,5,10000,FunqOrderedSet,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 15)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 15)]",Computes the set-theoretic relative complement (or Except) operation.,SetOperation,
Difference,FunqOrderedSet,78.500,10000,5,10000,FunqOrderedSet,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 15)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 15)]",Computes the set-theoretic symmetric difference operation.,SetOperation,
IsProperSubset,FunqOrderedSet,0.016,10000,5,10000,FunqOrderedSet,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 15)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 15)]",Determines the Subset relation.,SetRelation,
IsProperSuperset,FunqOrderedSet,0.007,10000,5,10000,FunqOrderedSet,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 15)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 15)]",Determines the Superset relation.,SetRelation,
SetEquals,FunqOrderedSet,0.007,10000,5,10000,FunqOrderedSet,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 15)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 15)]","Determines if this set equals another data structure, {iters} times.",SetRelation,
Add,FunqOrderedSet,25.388,10000,5,10000,Array,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 15)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 15)]","",SetSingle,
Contains,FunqOrderedSet,4.219,10000,10000,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 15)]","","Determines if a random element of the set is part of it, {iters} times.",SetSingle,
Remove,FunqOrderedSet,30.528,10000,10000,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 15)]","","",SetSingle,
IEnumerator,FunqOrderedSet,1.381,10000,10000,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 15)]","","",Iteration,
AddRange,FunqOrderedSet,22.760,10000,5,10000,Array,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 15)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 15)]","",SetRange,
RemoveRange,FunqOrderedSet,16.492,10000,5,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 15)]","","",SetRange,Some(0.3)
Iterate,FunqOrderedSet,0.372,10000,1,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 15)]","","",Iteration,
Union,System.ImmutableSortedSet,208.904,10000,5,10000,System.ImmutableSortedSet,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 15)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 15)]",Computes the set-theoretic union with another data structure {iters} times.,SetOperation,
Intersection,System.ImmutableSortedSet,167.826,10000,5,10000,System.ImmutableSortedSet,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 15)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 15)]",Computes the set-theoretic intersection with another data structure {iters} times.,SetOperation,
Except,System.ImmutableSortedSet,161.672,10000,5,10000,System.ImmutableSortedSet,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 15)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 15)]",Computes the set-theoretic relative complement (or Except) operation.,SetOperation,
Difference,System.ImmutableSortedSet,717.656,10000,5,10000,System.ImmutableSortedSet,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 15)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 15)]",Computes the set-theoretic symmetric difference operation.,SetOperation,
IsProperSubset,System.ImmutableSortedSet,148.782,10000,5,10000,System.ImmutableSortedSet,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 15)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 15)]",Determines the Subset relation.,SetRelation,
IsProperSuperset,System.ImmutableSortedSet,0.022,10000,5,10000,System.ImmutableSortedSet,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 15)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 15)]",Determines the Superset relation.,SetRelation,
SetEquals,System.ImmutableSortedSet,140.778,10000,5,10000,System.ImmutableSortedSet,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 15)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 15)]","Determines if this set equals another data structure, {iters} times.",SetRelation,
Add,System.ImmutableSortedSet,111.596,10000,5,10000,Array,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 15)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 15)]","",SetSingle,
Contains,System.ImmutableSortedSet,20.334,10000,10000,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 15)]","","Determines if a random element of the set is part of it, {iters} times.",SetSingle,
Remove,System.ImmutableSortedSet,29.668,10000,10000,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 15)]","","",SetSingle,
IEnumerator,System.ImmutableSortedSet,3.086,10000,10000,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 15)]","","",Iteration,
AddRange,System.ImmutableSortedSet,145.754,10000,5,10000,Array,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 15)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 15)]","",SetRange,
RemoveRange,System.ImmutableSortedSet,40.913,10000,5,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 15)]","","",SetRange,Some(0.3)
Iterate,System.ImmutableSortedSet,3.701,10000,1,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 15)]","","",Iteration,
Lookup,FunqMap,2.570,10000,10000,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 15)]","","",MapSingle,
IEnumerator,FunqMap,1.210,10000,10000,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 15)]","","",Iteration,
RemoveKey,FunqMap,24.964,10000,10000,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 15)]","","",MapSingle,
Add,FunqMap,199.425,10000,5,10000,Array,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 15)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 15)]","",MapSingle,
Iterate,FunqMap,0.449,10000,1,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 15)]","","",Iteration,
AddRange,FunqMap,84.743,10000,5,10000,Array,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 15)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.Collections.Generic.KeyValuePair`2[System.String,System.String]]","",MapRange,
RemoveRange,FunqMap,13.395,10000,5,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 15)]","","",MapRange,Some(0.3)
Lookup,System.ImmutableDict,3.830,10000,10000,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 15)]","","",MapSingle,
IEnumerator,System.ImmutableDict,4.478,10000,10000,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 15)]","","",Iteration,
RemoveKey,System.ImmutableDict,22.332,10000,10000,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 15)]","","",MapSingle,
Add,System.ImmutableDict,171.953,10000,5,10000,Array,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 15)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 15)]","",MapSingle,
Iterate,System.ImmutableDict,5.020,10000,1,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 15)]","","",Iteration,
AddRange,System.ImmutableDict,78.805,10000,5,10000,Array,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 15)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.Collections.Generic.KeyValuePair`2[System.String,System.String]]","",MapRange,
RemoveRange,System.ImmutableDict,20.513,10000,5,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 15)]","","",MapRange,Some(0.3)
Lookup,FSharp.Map,4.625,10000,10000,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 15)]","","",MapSingle,
IEnumerator,FSharp.Map,0.912,10000,10000,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 15)]","","",Iteration,
RemoveKey,FSharp.Map,19.127,10000,10000,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 15)]","","",MapSingle,
Add,FSharp.Map,145.206,10000,5,10000,Array,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 15)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 15)]","",MapSingle,
Iterate,FSharp.Map,1.132,10000,1,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 15)]","","",Iteration,
AddRange,FSharp.Map,152.689,10000,5,10000,Array,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 15)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.Collections.Generic.KeyValuePair`2[System.String,System.String]]","",MapRange,
RemoveRange,FSharp.Map,28.874,10000,5,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 15)]","","",MapRange,Some(0.3)
Lookup,System.ImmutableSortedDict,20.450,10000,10000,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 15)]","","",MapSingle,
IEnumerator,System.ImmutableSortedDict,2.434,10000,10000,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 15)]","","",Iteration,
RemoveKey,System.ImmutableSortedDict,31.961,10000,10000,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 15)]","","",MapSingle,
Add,System.ImmutableSortedDict,207.895,10000,5,10000,Array,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 15)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 15)]","",MapSingle,
Iterate,System.ImmutableSortedDict,3.366,10000,1,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 15)]","","",Iteration,
AddRange,System.ImmutableSortedDict,161.703,10000,5,10000,Array,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 15)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.Collections.Generic.KeyValuePair`2[System.String,System.String]]","",MapRange,
RemoveRange,System.ImmutableSortedDict,42.222,10000,5,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 15)]","","",MapRange,Some(0.3)
Lookup,FunqOrderedMap,4.105,10000,10000,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 15)]","","",MapSingle,
IEnumerator,FunqOrderedMap,0.966,10000,10000,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 15)]","","",Iteration,
RemoveKey,FunqOrderedMap,32.054,10000,10000,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 15)]","","",MapSingle,
Add,FunqOrderedMap,211.057,10000,5,10000,Array,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 15)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 15)]","",MapSingle,
Iterate,FunqOrderedMap,0.290,10000,1,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 15)]","","",Iteration,
AddRange,FunqOrderedMap,66.871,10000,5,10000,Array,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 15)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.Collections.Generic.KeyValuePair`2[System.String,System.String]]","",MapRange,
RemoveRange,FunqOrderedMap,14.618,10000,5,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 15)]","","",MapRange,Some(0.3)
