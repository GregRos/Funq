<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ parameter name="TypeName" type="System.String"#>
<#@ parameter name="ElementName" type="System.String"#>
<#@ include file="Helpers.ttinclude"#><# if (!RanAlready) {
		RanAlready = true;
		return TransformText().Replace("\t", "    ");
	}
	var typeName = TypeName ?? "FunqList<T>";
#>
<#= IncludeWithParameters("Base.ttinclude", new[] {Tu("TypeName", typeName)}, 0)#>
 ///Returns true if the set contains the value.
let contains value (set : <#= TypeName#>) = set.Contains(value)

///Returns the intersection of the two sets.
let intersect (other : _ seq) (set : <#= TypeName#>) = set.Intersect(other)

///Returns the union of the two sets.
let union (other : _ seq) (set : <#= TypeName#>) = set.Union(other)

///Returns <#= TypeName#>' minus the elements of 'other'.
let except (other : _ seq) (set :<#= TypeName#>) = set.Except(other)

///Returns 'other' minus the elements of <#= TypeName#>'
let exceptInverse (other :_ seq) (set : <#= TypeName#>) = set.ExceptInverse(other)

///Returns the symmetric difference between <#= TypeName#>' and 'other'.
let difference (other : _ seq) (set :<#= TypeName#>) = set.Difference(other)

///Returns the set-theoretic relation (may be more than one) between the two sets.
let relates (other : _ seq) (set :<#= TypeName#>) = set.RelatesTo(other)

///Returns true if <#= TypeName#>' is a subset of 'other'
let isSubsetOf (other : _ seq) (set : <#= TypeName#>) = set.IsSubsetOf(other)

///Returns true if <#= TypeName#>' is a superset of 'other'
let isSuperOf (other : _ seq) (set : <#= TypeName#>) = set.IsSupersetOf(other)

///Returns true if <#= TypeName#>' is equal to 'other'
let isEqual (other : _ seq) (set : <#= TypeName#>) = set.SetEquals(other)

///Returns true if <#= TypeName#>' is a proper subset of 'other'
let isProperSubsetOf (other : _ seq) (set : <#= TypeName#>) = set.IsProperSubsetOf(other)

///Returns true if <#= TypeName#>' is a proper superset of 'other'
let isProperSuperOf (other : _ seq) (set : <#= TypeName#>) = set.IsProperSupersetOf(other)

///Returns true if <#= TypeName#>' is disjoint with (shares no elements with) other.
let isDisjointWith (other : _ seq) (set : <#= TypeName#>) = set.IsDisjointWith(other)