<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".fs" #>
<#@ include file="Helpers.ttinclude"#><# if (!RanAlready) {
		RanAlready = true;
		return TransformText().Replace("\t", "    ");
	}
#>
namespace Funq.FSharp
open Funq.FSharp
open Funq.FSharp.Implementation
open Funq
module FunqVector = 
<#=IncludeWithParameters("Sequential.ttinclude", new[] {Tu("TypeName", "FunqVector<'v>"), Tu("ElementName", "'v")},1 )#>

module FunqList = 
<#=IncludeWithParameters("Sequential.ttinclude", 
	new[] {
		Tu("TypeName", "FunqList<'v>"), 
		Tu("ElementName", "'v")
	}, 1)#>
	 
module FunqSet = 
<#=IncludeWithParameters("Set.ttinclude", 
	new[] {
		Tu("TypeName", "FunqSet<'k>"), 
		Tu("ElementName", "'k")
	}, 1)#>

module FunqOrderedSet = 
<#=IncludeWithParameters("Set.ttinclude", 
	new[] {
		Tu("TypeName", "FunqOrderedSet<'k>"), 
		Tu("ElementName", "'k")
	}, 1)#>

module FunqMap = 
<#=IncludeWithParameters("Map.ttinclude", 
	new[] {
		Tu("TypeName", "FunqMap<'k, 'v>"), 
		Tu("KeyName", "'k"),
		Tu("ValueName", "'v")
	}, 1)#>

module FunqOrderedMap = 
<#=IncludeWithParameters("Map.ttinclude", 
	new[] {
		Tu("TypeName", "FunqOrderedMap<'k, 'v>"), 
		Tu("KeyName", "'k"),
		Tu("ValueName", "'v")
	}, 1)#>
	

