<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ assembly name="Microsoft.CSharp, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="Microsoft.VisualStudio.TextTemplating" #>
<#+
	public bool RanAlready = false;

	public Tuple<string, string> Tu(string name, string value) {
		return Tuple.Create(name, value);
	}

	public string IncludeWithParameters(string template, IEnumerable<Tuple<string, string>> x, int indent) {
		var host = Host;
		var resolveHost = (ITextTemplatingEngineHost) host;
			
		string templateFile = resolveHost.ResolvePath(template);
		string templateContent = File.ReadAllText(templateFile);
		var session = new TextTemplatingSession();
		foreach (var item in x) {
			var name = item.Item1;
			var value = item.Item2;
			session[name] = value;
		}
		var sHost = (ITextTemplatingSessionHost) host;
		sHost.Session = session;
		var engine = new Engine();
		var content = engine.ProcessTemplate(templateContent, resolveHost);
		var indentStr = indent == 0 ? "" : Enumerable.Repeat("\t", indent).Aggregate((a, b) => a + b);
		content = content.Replace("\r\n", "\r\n" + indentStr);
		content = indentStr + content;
		return content;
	}
#>