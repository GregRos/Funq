<#@ template debug="true" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ parameter name="TypeName" type="System.String"#>
<#@ parameter name="ElementName" type="System.String"#>
<#
	var wasCalled = TypeName != null;
	var typeName = TypeName ?? "ImmList<T>";
	var elementName = ElementName ?? "T";
#>
let isEmpty (collection : <#=typeName#>) = collection.IsEmpty

///Returns the length of the collection. O(1)
let length (collection : <#=typeName#>) = collection.Length

///Iterates over the collection.
let iter f (collection : <#=typeName#>) = collection.ForEach(toAction f)  

///Iterates over the collection with 'f' returns true, stops when it returns 'false'.
let iterWhile f (collection : <#=typeName#>) = collection.ForEachWhile(toFunc1 f)

///Folds over the collection, in the default iteration order.
let fold initial f (collection : <#=typeName#>) = collection.Aggregate(initial, toFunc2 f)

///Folds over the collection, starting by applying the function to the first two elements.
let reduce f (collection : <#=typeName#>) = collection.Aggregate(toFunc2 f)

///Returns the single element present in the collection, or throws an exception if there is more than one element, or if there are no elements.
let single (collection : <#=typeName#>) = collection.Single()

///Converts the specified collection to an array.
let toArray (collection : <#=typeName#>) = collection.ToArray()

///Converts the elements of the collection to a string, using the specified separator.
let print sep (collection : <#=typeName#>)  = collection.Print(sep, sprintf "%A" |> toFunc1)

///Converts the elements of the collection to a string using the specified function, using the specified separator.
let printWith sep format (collection : <#=typeName#>) = collection.Print(sep, (sprintf format) |> toFunc1)

///Finds an element that satisfies 'f', or None.
let find f (collection : <#=typeName#>) = collection.Find(toFunc1 f) |> fromOption

///Returns the first element from which the function returns Some, or returns None.
let pick f (collection : <#=typeName#>) = collection.Pick(f >> toOption |> toFunc1) |> fromOption

///Returns true if an element satisfying 'f' exists in the collection.
let exists f (collection : <#=typeName#>) = collection.Any(toFunc1 f)

///Returns true if all the elements in the collection satisfies 'f'.
let forAll f (collection : <#=typeName#>) = collection.All(toFunc1 f)

///Counts the number of elements satisfying 'f' in the collection.
let count f (collection : <#=typeName#>) = collection.Count(toFunc1 f)