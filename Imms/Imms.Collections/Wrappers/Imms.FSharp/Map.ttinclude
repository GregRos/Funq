<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ parameter name="TypeName" type="System.String"#>
<#@ parameter name="KeyName" type="System.String"#>
<#@ parameter name="ValueName" type="System.String"#>
<#@ include file="Helpers.ttinclude"#><#	if (!RanAlready) {
		RanAlready = true;
		return TransformText().Replace("\t", "    ");
	}
	var typeName = TypeName ?? "ImmList<T>";
	var keyName = KeyName ?? "'TKey";
	var valueName = ValueName ?? "'TValue";
#>
<#= IncludeWithParameters("Base.ttinclude", new[] {Tu("TypeName", typeName),Tu("ElementName", string.Format("Kvp<{0}, {1}>", KeyName, ValueName))
}, 0)#>
///Returns true if every key-value pair satisfies the specified predicate.
let forAllPairs (f : <#=keyName #> -> <#=valueName #> -> bool) (collection : <#=typeName#>) = collection.All(toFunc2 f)

///Returns true if any key-value pair satisfies the given predicate.
let existsPair f (map : <#=typeName#>) = map.Any(toFunc2 f)

///Returns the first pair (in order of iteration) that fulfills the given predicate.
let findPair f (map : <#=typeName#>) = map.Find(toFunc2 f)

///Applies the specified function on every key-value pair, and returns the first result that isn't None.
let pickPair (f : <#=keyName #> -> <#=valueName #> -> 'out option) (map : <#=typeName#>) = map.Pick((fun a b -> f a b |> toOption) |> toFunc2) |> fromOption

///Returns the number of key-value pairs that fulfill the specified predicate.
let countPairs (f : <#=keyName #> -> <#=valueName #> -> bool) (map : <#=typeName#>) = map.Count(toFunc2 f)

///Adds a key-value pair to the map, throwing an exception if the key already exists.
let add k v (map : <#=typeName#>) = 
    map.Add(k, v)

///Adds a key-value pair to the map, overwriting the previous value.
let set k v (map : <#=typeName#>) =
    map.Set(k, v)

///Adds a sequence of key-value pairs (in the form of 2-tuples) to the map, throwing an exception if a key already exists.
let addPairs pairs (map : <#=typeName#>) =
    map.AddRange(pairs |> Seq.map (Kvp.Of))

///Adds a sequence of key-value pairs (in the form of KeyValuePairs) to the map, throwing an exception if a key already exists.
let addRange kvps (map : <#=typeName#>) =
    map.AddRange kvps

///Adds a sequence of key-value pairs to the map (in the form of 2-tuples), overwriting previous information.
let setPairs pairs (map : <#=typeName#>) =
    map.SetRange(pairs |> Seq.map (Kvp.Of))

///Adds a sequence of key-value pairs to the map (in the form of KeyValuePairs), overwriting previous information.
let setRange kvps (map : <#=typeName#>) =
    map.SetRange kvps

///Removes a key from the map.
let remove k (map : <#=typeName#>) =
    map.Remove k

///Removes a number of keys from the map.
let removeRange ks (map : <#=typeName#>) =
    map.RemoveRange ks

///Merges this map with the specified sequence of key-value pairs, viewed as another map, using the specified function to resolve collisions.
let merge kvps f (map : <#=typeName#>) =
    map.Merge(kvps, toFunc3 f)

///Joins this map with a sequence of key-value pairs, viewed as another map, using the specified function to resolve collisions.
let join kvps f (map : <#=typeName#>) =
    map.Join(kvps, toFunc3 f)

///Removes all the keys present in a sequence of key-value pairs, taken as another map. The value type of the map may be different.
let minus kvps (map : <#=typeName#>) =
    map.Subtract(kvps)

///Applies a subtraction function on each key-value pair present in both this map, and the specified other map. If the function returns None, the key is removed.
let minusWith kvps f (map : <#=typeName#>) =
    map.Subtract(kvps, (fun a b c -> f a b c |> toOption) |> toFunc3)

let mapEquals other (map : <#=typeName#>) =
    map.MapEquals(other)

let mapEqualsWith (eq : _ IEq) other (map : <#=typeName#>) = 
    map.MapEquals(other, eq)

let mapEqualsWithCmp (cmp : _ ICmp) other (map : <#=typeName#>) =
    map.MapEquals(other, cmp)

///Returns a new map consisting of only those key-value pairs present in exactly one map.
let difference kvps (map : <#=typeName#>) =
    map.Difference(kvps)

///Returns a sequence of keys.
let keys (map : <#=typeName#>) = map.Keys

///Returns a sequence of values.
let values (map : <#=typeName#>) = map.Values

///Returns the value with the specified key.
let get key (map : <#=typeName#>) = map.[key]

///Returns the value associated with the specified key, or None.
let tryGet key (map : <#=typeName#>) = map.TryGet(key) |> fromOption

///Returns true if the map contains the specified key.
let containsKey key (map : <#=typeName#>) = map.ContainsKey(key)