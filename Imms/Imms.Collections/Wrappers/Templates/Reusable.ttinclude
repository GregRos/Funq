 <#@ assembly name="Microsoft.VisualStudio.TextTemplating.Interfaces.11.0" #>
<#@ import namespace="System.Collections.Generic"#>
<#@ import namespace="Microsoft.VisualStudio.TextTemplating"#>
<#@ import namespace="Microsoft.VisualStudio.TextTemplating.VSHost"#>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq"#>
<#@ import namespace="System.Linq.Expressions"#>
<#@ import namespace="System.Runtime.Remoting.Messaging"#>
<#@ import namespace="System.IO"#>
<# //REMEMBER THAT THE DUMMY TEMPLATE FILES COMPILE ONLY WHEN THE DEUBG SYMBOL IS ACTIVE!!!!!! this is to hide them in public releases. #>
<#+ 
class ParameterizedTemplate
{
	private readonly List<string> _paramNames = new List<string>();
	private readonly string _prototypeFile;
    
	public ParameterizedTemplate(string prototypeFile)
	{
	  _prototypeFile = prototypeFile;
	}
    
    public string Process(ITextTemplatingEngineHost host, params Expression<Func<string, string>>[] parameters)
	{         
		var provider = host as IServiceProvider;
		var t4 = provider.GetService(typeof(STextTemplating)) as ITextTemplating;
		var prototypePath = host.ResolvePath(_prototypeFile);
		var dictionary = new Dictionary<string, string>();
		foreach (var lambda in parameters)
		{
			var paramName = lambda.Parameters.Single().Name;
			var paramValue = lambda.Compile().Invoke(paramName);
			dictionary[paramName] = paramValue;
		}
	    var prototypeContents = File.ReadAllText(prototypePath);
		foreach (var pair in dictionary)
		{
			prototypeContents = prototypeContents.Replace(string.Format("__{0}__", pair.Key), pair.Value);
		}
	    return prototypeContents;
	}

   public static readonly ParameterizedTemplate ListLikeClass =
	new ParameterizedTemplate(@"..\Templates\ListLikeClass.cs");

}
	
#>