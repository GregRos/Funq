<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="$(TargetPath)" #>
<#@ assembly name="System.Core" #>

<#@ import namespace="System.Text" #>

<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="static System.Reflection.BindingFlags" #>
<#@ import namespace="MixLight" #>
<#@ import namespace="static MixLight.ReflectExt" #>
<#@ import namespace="static System.Linq.Enumerable" #>
<#@ output extension=".cs" #>
<#+
	
	protected void GenerateImplementationsForTypes(Type[] types) {
		foreach (var type in types.OfRuntimeType(typeof(Has<>))) { //start type loop
#>

namespace <#= type.Namespace #> {
	partial class <#= type.PrettyFullName() #> {
<#+
			foreach (var hasMixin in type.GetInterfaces().OfRuntimeType(typeof (Has<>))) {
				var mixin = hasMixin.GetGenericArguments()[0];

				foreach (var method in mixin.GetMethods(Instance | DeclaredOnly | Public | NonPublic).Where(x => x.GetCustomAttributes<InheritableAttribute>(false).Any())) {
#>
		public <#= method.ReturnType.PrettyFullName() #> <#= method.Name #>(<#= method.GetParameters().Select(p => $"{p.ParameterType.PrettyFullName()} {p.Name}") #>) {
<#+
					var invocationArgs = method.GetParameters().Select(x => x.Name).ToList();
					invocationArgs.Insert(0, "this");
					var argsString = invocationArgs.Join(", ");
#>
			return this.Mixout<<#=mixin.PrettyFullName()#>() . <#= method.Name #>(<#= argsString #>);
		
		} //end method
<#+
				} //end method loop
			} //end mixin loop	
#>

	}//end class

} //end namespace
<#+
		} //end type loop
#>

<#+
	}
#>

