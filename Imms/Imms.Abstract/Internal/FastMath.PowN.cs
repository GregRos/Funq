using System;
namespace Imms {
	
	///Implements fast math operations.
	public static partial class FastMath {
		private static readonly int[][] ExpTable = new[] {
		new[]{1,2,4,8,16,32,64,128,256,512,1024,2048,4096,8192,16384,32768,65536,131072,262144,524288,1048576,2097152,4194304,8388608,16777216,33554432,67108864,134217728,268435456,536870912},
		new[]{1,3,9,27,81,243,729,2187,6561,19683,59049,177147,531441,1594323,4782969,14348907,43046721,129140163,387420489},
		new[]{1,4,16,64,256,1024,4096,16384,65536,262144,1048576,4194304,16777216,67108864,268435456},
		new[]{1,5,25,125,625,3125,15625,78125,390625,1953125,9765625,48828125,244140625},
		new[]{1,6,36,216,1296,7776,46656,279936,1679616,10077696,60466176},
		new[]{1,7,49,343,2401,16807,117649,823543,5764801,40353607,282475249},
		new[]{1,8,64,512,4096,32768,262144,2097152,16777216,134217728},
		new[]{1,9,81,729,6561,59049,531441,4782969,43046721},
		new[]{1,10,100,1000,10000,100000,1000000,10000000,100000000},
	};//end table
		///<summary>
		///Calculates b^e ('b' to the power of 'e') much faster than Math.Pow. Uses a lookup table. b must be in [2,10], maximum for 'e' depends on base.
		///</summary>
		public static int PowN(int b, int e) {
			return ExpTable[b-2][e];
		}//end method
	}//end class

} // end namespace
