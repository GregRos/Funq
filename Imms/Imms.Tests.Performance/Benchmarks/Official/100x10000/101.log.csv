Test,Target,Time,Target_InitialSize,Iterations,DataSource_Size,DataSource_Type,Target_InitialGenerator,DataGenerator,Description,Class,Ratio
AddFirst,ImmList,2.575,100,10000,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","",Adds arbitrary items repeatedly to the beginning of the sequence.,DequeSingle,
AddLast,ImmList,2.469,100,10000,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","","",DequeSingle,
RemoveLast,ImmList,1.120,100,10000,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","","",DequeSingle,
RemoveFirst,ImmList,0.947,100,10000,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","","",DequeSingle,
Insert,ImmList,12.823,100,10000,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","","",IndexingSingle,
Remove,ImmList,4.391,100,10000,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","","",IndexingSingle,
Update,ImmList,3.235,100,10000,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","",Randomly updates items by index from the entire collection.,IndexingSingle,
IEnumerator,ImmList,0.554,100,10000,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","","",Iteration,
Lookup,ImmList,0.811,100,10000,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","",Randomly looks up {iters} items by index from the entire collection.,IndexingSingle,
AddLastRange,ImmList,2.129,100,3,10000,Array,"[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]",Adds a collection of items to the end {iters} times.,DequeRange,
AddFirstRange,ImmList,2.039,100,3,10000,Array,"[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]",Adds a collection of items to the beginning {iters} times.,DequeRange,
Insert Range,ImmList,2.334,100,3,10000,Array,"[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","",IndexingRange,
AddLastRange (concat),ImmList,0.010,100,3,10000,ImmList,"[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]",Adds a collection of items to the end {iters} times.,DequeRange,
AddFirstRange (concat),ImmList,0.008,100,3,10000,ImmList,"[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]",Adds a collection of items to the beginning {iters} times.,DequeRange,
Insert Range (concat),ImmList,0.032,100,3,10000,ImmList,"[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","",IndexingRange,
Take,ImmList,0.003,100,3,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","","Returns a starting subsequence consisting of a random number of items (from the entire collection), {iters} times.",Subsequence,
Skip,ImmList,0.003,100,3,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","","",Subsequence,
Iterate,ImmList,0.001,100,1,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","","",Iteration,
AddLast,ImmVector,3.122,100,10000,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","","",DequeSingle,
RemoveLast,ImmVector,1.340,100,10000,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","","",DequeSingle,
IEnumerator,ImmVector,0.150,100,10000,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","","",Iteration,
Lookup,ImmVector,0.392,100,10000,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","",Randomly looks up {iters} items by index from the entire collection.,IndexingSingle,
Update,ImmVector,1.979,100,10000,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","",Randomly updates items by index from the entire collection.,IndexingSingle,
AddLastRange,ImmVector,0.115,100,3,10000,Array,"[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]",Adds a collection of items to the end {iters} times.,DequeRange,
AddFirstRange,ImmVector,0.519,100,3,10000,Array,"[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]",Adds a collection of items to the beginning {iters} times.,DequeRange,
Insert Range,ImmVector,0.157,100,3,10000,Array,"[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","",IndexingRange,
AddLastRange (concat),ImmVector,0.269,100,3,10000,ImmVector,"[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]",Adds a collection of items to the end {iters} times.,DequeRange,
AddFirstRange (concat),ImmVector,0.281,100,3,10000,ImmVector,"[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]",Adds a collection of items to the beginning {iters} times.,DequeRange,
Insert Range (concat),ImmVector,0.341,100,3,10000,ImmVector,"[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","",IndexingRange,
Take,ImmVector,0.001,100,3,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","","Returns a starting subsequence consisting of a random number of items (from the entire collection), {iters} times.",Subsequence,
Skip,ImmVector,0.003,100,3,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","","",Subsequence,
Iterate,ImmVector,0.001,100,1,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","","",Iteration,
AddFirst,System.ImmutableList,10.430,100,10000,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","",Adds arbitrary items repeatedly to the beginning of the sequence.,DequeSingle,
AddLast,System.ImmutableList,10.305,100,10000,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","","",DequeSingle,
IEnumerator,System.ImmutableList,1.854,100,10000,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","","",Iteration,
RemoveFirst,System.ImmutableList,3.086,100,10000,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","","",DequeSingle,
RemoveLast,System.ImmutableList,2.486,100,10000,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","","",DequeSingle,
Insert,System.ImmutableList,11.435,100,10000,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","","",IndexingSingle,
Remove,System.ImmutableList,3.301,100,10000,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","","",IndexingSingle,
Update,System.ImmutableList,2.715,100,10000,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","",Randomly updates items by index from the entire collection.,IndexingSingle,
Lookup,System.ImmutableList,0.474,100,10000,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","",Randomly looks up {iters} items by index from the entire collection.,IndexingSingle,
AddLastRange (concat),System.ImmutableList,27.487,100,3,10000,System.ImmutableList,"[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]",Adds a collection of items to the end {iters} times.,DequeRange,
AddFirstRange (concat),System.ImmutableList,26.837,100,3,10000,System.ImmutableList,"[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]",Adds a collection of items to the beginning {iters} times.,DequeRange,
Insert Range (concat),System.ImmutableList,28.424,100,3,10000,System.ImmutableList,"[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","",IndexingRange,
AddLastRange,System.ImmutableList,17.324,100,3,10000,Array,"[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]",Adds a collection of items to the end {iters} times.,DequeRange,
AddFirstRange,System.ImmutableList,17.793,100,3,10000,Array,"[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]",Adds a collection of items to the beginning {iters} times.,DequeRange,
Insert Range,System.ImmutableList,23.924,100,3,10000,Array,"[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","",IndexingRange,
Take,System.ImmutableList,0.014,100,3,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","","Returns a starting subsequence consisting of a random number of items (from the entire collection), {iters} times.",Subsequence,
Skip,System.ImmutableList,0.009,100,3,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","","",Subsequence,
Iterate,System.ImmutableList,0.021,100,1,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","","",Iteration,
AddFirst,FSharpx.Deque,0.566,100,10000,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","",Adds arbitrary items repeatedly to the beginning of the sequence.,DequeSingle,
AddLast,FSharpx.Deque,0.474,100,10000,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","","",DequeSingle,
IEnumerator,FSharpx.Deque,0.247,100,10000,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","","",Iteration,
RemoveLast,FSharpx.Deque,1.256,100,10000,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","","",DequeSingle,
RemoveFirst,FSharpx.Deque,0.483,100,10000,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","","",DequeSingle,
AddLastRange,FSharpx.Deque,2.375,100,3,10000,Array,"[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]",Adds a collection of items to the end {iters} times.,DequeRange,
AddFirstRange,FSharpx.Deque,2.464,100,3,10000,Array,"[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]",Adds a collection of items to the beginning {iters} times.,DequeRange,
AddLastRange (concat),FSharpx.Deque,2.808,100,3,10000,FSharpx.Deque,"[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]",Adds a collection of items to the end {iters} times.,DequeRange,
AddFirstRange (concat),FSharpx.Deque,3.169,100,3,10000,FSharpx.Deque,"[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]",Adds a collection of items to the beginning {iters} times.,DequeRange,
Iterate,FSharpx.Deque,0.004,100,1,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","","",Iteration,
AddLast,FSharpx.Vector,1.823,100,10000,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","","",DequeSingle,
RemoveLast,FSharpx.Vector,5.421,100,10000,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","","",DequeSingle,
IEnumerator,FSharpx.Vector,0.154,100,10000,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","","",Iteration,
Lookup,FSharpx.Vector,0.174,100,10000,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","",Randomly looks up {iters} items by index from the entire collection.,IndexingSingle,
Update,FSharpx.Vector,4.221,100,10000,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","",Randomly updates items by index from the entire collection.,IndexingSingle,
AddLastRange,FSharpx.Vector,7.779,100,3,10000,Array,"[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]",Adds a collection of items to the end {iters} times.,DequeRange,
AddLastRange (concat),FSharpx.Vector,9.732,100,3,10000,FSharpx.Vector,"[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]",Adds a collection of items to the end {iters} times.,DequeRange,
Iterate,FSharpx.Vector,0.005,100,1,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","","",Iteration,
Union,System.ImmutableSet,57.790,100,3,10000,System.ImmutableSet,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]",Computes the set-theoretic union with another data structure {iters} times.,SetOperation,
Intersection,System.ImmutableSet,20.007,100,3,10000,System.ImmutableSet,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]",Computes the set-theoretic intersection with another data structure {iters} times.,SetOperation,
Except,System.ImmutableSet,20.568,100,3,10000,System.ImmutableSet,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]",Computes the set-theoretic relative complement (or Except) operation.,SetOperation,
Difference,System.ImmutableSet,58.797,100,3,10000,System.ImmutableSet,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]",Computes the set-theoretic symmetric difference operation.,SetOperation,
IsProperSubset,System.ImmutableSet,21.321,100,3,10000,System.ImmutableSet,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]",Determines the Subset relation.,SetRelation,
IsProperSuperset,System.ImmutableSet,0.008,100,3,10000,System.ImmutableSet,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]",Determines the Superset relation.,SetRelation,
SetEquals,System.ImmutableSet,19.317,100,3,10000,System.ImmutableSet,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","Determines if this set equals another data structure, {iters} times.",SetRelation,
Add,System.ImmutableSet,76.444,100,3,10000,Array,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","",SetSingle,
Contains,System.ImmutableSet,1.560,100,10000,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","Determines if a random element of the set is part of it, {iters} times.",SetSingle,
Remove,System.ImmutableSet,9.391,100,10000,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","",SetSingle,
IEnumerator,System.ImmutableSet,4.854,100,10000,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","",Iteration,
AddRange,System.ImmutableSet,40.430,100,3,10000,Array,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","",SetRange,
RemoveRange,System.ImmutableSet,0.092,100,3,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","",SetRange,Some(0.6)
Iterate,System.ImmutableSet,0.060,100,1,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","",Iteration,
Union,FSharp.Set,0.535,100,3,10000,FSharp.Set,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]",Computes the set-theoretic union with another data structure {iters} times.,SetOperation,
Intersection,FSharp.Set,4.809,100,3,10000,FSharp.Set,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]",Computes the set-theoretic intersection with another data structure {iters} times.,SetOperation,
Except,FSharp.Set,23.127,100,3,10000,FSharp.Set,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]",Computes the set-theoretic relative complement (or Except) operation.,SetOperation,
Difference,FSharp.Set,28.183,100,3,10000,FSharp.Set,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]",Computes the set-theoretic symmetric difference operation.,SetOperation,
IsProperSubset,FSharp.Set,0.003,100,3,10000,FSharp.Set,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]",Determines the Subset relation.,SetRelation,
IsProperSuperset,FSharp.Set,0.002,100,3,10000,FSharp.Set,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]",Determines the Superset relation.,SetRelation,
SetEquals,FSharp.Set,0.007,100,3,10000,FSharp.Set,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","Determines if this set equals another data structure, {iters} times.",SetRelation,
Add,FSharp.Set,60.557,100,3,10000,Array,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","",SetSingle,
Contains,FSharp.Set,1.064,100,10000,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","Determines if a random element of the set is part of it, {iters} times.",SetSingle,
Remove,FSharp.Set,5.742,100,10000,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","",SetSingle,
IEnumerator,FSharp.Set,0.677,100,10000,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","",Iteration,
AddRange,FSharp.Set,57.727,100,3,10000,Array,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","",SetRange,
RemoveRange,FSharp.Set,0.103,100,3,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","",SetRange,Some(0.6)
Iterate,FSharp.Set,0.010,100,1,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","",Iteration,
Union,ImmSet,0.369,100,3,10000,ImmSet,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]",Computes the set-theoretic union with another data structure {iters} times.,SetOperation,
Intersection,ImmSet,0.222,100,3,10000,ImmSet,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]",Computes the set-theoretic intersection with another data structure {iters} times.,SetOperation,
Except,ImmSet,0.456,100,3,10000,ImmSet,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]",Computes the set-theoretic relative complement (or Except) operation.,SetOperation,
Difference,ImmSet,1.152,100,3,10000,ImmSet,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]",Computes the set-theoretic symmetric difference operation.,SetOperation,
IsProperSubset,ImmSet,0.009,100,3,10000,ImmSet,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]",Determines the Subset relation.,SetRelation,
IsProperSuperset,ImmSet,0.001,100,3,10000,ImmSet,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]",Determines the Superset relation.,SetRelation,
SetEquals,ImmSet,0.001,100,3,10000,ImmSet,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","Determines if this set equals another data structure, {iters} times.",SetRelation,
Add,ImmSet,50.986,100,3,10000,Array,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","",SetSingle,
Contains,ImmSet,0.838,100,10000,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","Determines if a random element of the set is part of it, {iters} times.",SetSingle,
Remove,ImmSet,4.702,100,10000,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","",SetSingle,
IEnumerator,ImmSet,0.895,100,10000,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","",Iteration,
AddRange,ImmSet,54.101,100,3,10000,Array,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","",SetRange,
RemoveRange,ImmSet,0.079,100,3,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","",SetRange,Some(0.6)
Iterate,ImmSet,0.012,100,1,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","",Iteration,
Union,ImmOrderedSet,0.811,100,3,10000,ImmOrderedSet,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]",Computes the set-theoretic union with another data structure {iters} times.,SetOperation,
Intersection,ImmOrderedSet,0.925,100,3,10000,ImmOrderedSet,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]",Computes the set-theoretic intersection with another data structure {iters} times.,SetOperation,
Except,ImmOrderedSet,0.677,100,3,10000,ImmOrderedSet,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]",Computes the set-theoretic relative complement (or Except) operation.,SetOperation,
Difference,ImmOrderedSet,2.192,100,3,10000,ImmOrderedSet,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]",Computes the set-theoretic symmetric difference operation.,SetOperation,
IsProperSubset,ImmOrderedSet,0.068,100,3,10000,ImmOrderedSet,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]",Determines the Subset relation.,SetRelation,
IsProperSuperset,ImmOrderedSet,0.001,100,3,10000,ImmOrderedSet,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]",Determines the Superset relation.,SetRelation,
SetEquals,ImmOrderedSet,0.001,100,3,10000,ImmOrderedSet,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","Determines if this set equals another data structure, {iters} times.",SetRelation,
Add,ImmOrderedSet,88.613,100,3,10000,Array,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","",SetSingle,
Contains,ImmOrderedSet,11.320,100,10000,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","Determines if a random element of the set is part of it, {iters} times.",SetSingle,
Remove,ImmOrderedSet,10.288,100,10000,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","",SetSingle,
IEnumerator,ImmOrderedSet,0.813,100,10000,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","",Iteration,
AddRange,ImmOrderedSet,50.492,100,3,10000,Array,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","",SetRange,
RemoveRange,ImmOrderedSet,0.171,100,3,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","",SetRange,Some(0.6)
Iterate,ImmOrderedSet,0.001,100,1,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","",Iteration,
Union,System.ImmutableSortedSet,1.334,100,3,10000,System.ImmutableSortedSet,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]",Computes the set-theoretic union with another data structure {iters} times.,SetOperation,
Intersection,System.ImmutableSortedSet,46.331,100,3,10000,System.ImmutableSortedSet,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]",Computes the set-theoretic intersection with another data structure {iters} times.,SetOperation,
Except,System.ImmutableSortedSet,51.658,100,3,10000,System.ImmutableSortedSet,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]",Computes the set-theoretic relative complement (or Except) operation.,SetOperation,
Difference,System.ImmutableSortedSet,163.663,100,3,10000,System.ImmutableSortedSet,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]",Computes the set-theoretic symmetric difference operation.,SetOperation,
IsProperSubset,System.ImmutableSortedSet,100.225,100,3,10000,System.ImmutableSortedSet,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]",Determines the Subset relation.,SetRelation,
IsProperSuperset,System.ImmutableSortedSet,0.012,100,3,10000,System.ImmutableSortedSet,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]",Determines the Superset relation.,SetRelation,
SetEquals,System.ImmutableSortedSet,56.710,100,3,10000,System.ImmutableSortedSet,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","Determines if this set equals another data structure, {iters} times.",SetRelation,
Add,System.ImmutableSortedSet,110.752,100,3,10000,Array,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","",SetSingle,
Contains,System.ImmutableSortedSet,9.378,100,10000,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","Determines if a random element of the set is part of it, {iters} times.",SetSingle,
Remove,System.ImmutableSortedSet,13.852,100,10000,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","",SetSingle,
IEnumerator,System.ImmutableSortedSet,3.013,100,10000,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","",Iteration,
AddRange,System.ImmutableSortedSet,66.802,100,3,10000,Array,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","",SetRange,
RemoveRange,System.ImmutableSortedSet,0.204,100,3,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","",SetRange,Some(0.6)
Iterate,System.ImmutableSortedSet,0.032,100,1,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","",Iteration,
Lookup,ImmMap,0.650,100,10000,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","",MapSingle,
IEnumerator,ImmMap,0.782,100,10000,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","",Iteration,
RemoveKey,ImmMap,3.800,100,10000,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","",MapSingle,
Add,ImmMap,44.947,100,3,10000,Array,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","",MapSingle,
Iterate,ImmMap,0.004,100,1,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","",Iteration,
AddRange,ImmMap,52.928,100,3,10000,Array,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.Collections.Generic.KeyValuePair`2[System.String,System.String]]","",MapRange,
RemoveRange,ImmMap,0.066,100,3,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","",MapRange,Some(0.6)
Lookup,System.ImmutableDict,1.512,100,10000,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","",MapSingle,
IEnumerator,System.ImmutableDict,3.965,100,10000,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","",Iteration,
RemoveKey,System.ImmutableDict,14.507,100,10000,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","",MapSingle,
Add,System.ImmutableDict,86.727,100,3,10000,Array,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","",MapSingle,
Iterate,System.ImmutableDict,0.046,100,1,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","",Iteration,
AddRange,System.ImmutableDict,41.039,100,3,10000,Array,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.Collections.Generic.KeyValuePair`2[System.String,System.String]]","",MapRange,
RemoveRange,System.ImmutableDict,0.130,100,3,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","",MapRange,Some(0.6)
Lookup,FSharp.Map,1.170,100,10000,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","",MapSingle,
IEnumerator,FSharp.Map,0.643,100,10000,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","",Iteration,
RemoveKey,FSharp.Map,6.175,100,10000,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","",MapSingle,
Add,FSharp.Map,57.093,100,3,10000,Array,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","",MapSingle,
Iterate,FSharp.Map,0.021,100,1,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","",Iteration,
AddRange,FSharp.Map,56.470,100,3,10000,Array,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.Collections.Generic.KeyValuePair`2[System.String,System.String]]","",MapRange,
RemoveRange,FSharp.Map,0.120,100,3,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","",MapRange,Some(0.6)
Lookup,System.ImmutableSortedDict,7.300,100,10000,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","",MapSingle,
IEnumerator,System.ImmutableSortedDict,2.455,100,10000,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","",Iteration,
RemoveKey,System.ImmutableSortedDict,13.716,100,10000,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","",MapSingle,
Add,System.ImmutableSortedDict,93.449,100,3,10000,Array,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","",MapSingle,
Iterate,System.ImmutableSortedDict,0.033,100,1,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","",Iteration,
AddRange,System.ImmutableSortedDict,73.097,100,3,10000,Array,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.Collections.Generic.KeyValuePair`2[System.String,System.String]]","",MapRange,
RemoveRange,System.ImmutableSortedDict,0.209,100,3,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","",MapRange,Some(0.6)
Lookup,ImmOrderedMap,7.143,100,10000,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","",MapSingle,
IEnumerator,ImmOrderedMap,0.689,100,10000,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","",Iteration,
RemoveKey,ImmOrderedMap,10.242,100,10000,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","",MapSingle,
Add,ImmOrderedMap,85.977,100,3,10000,Array,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","",MapSingle,
Iterate,ImmOrderedMap,0.003,100,1,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","",Iteration,
AddRange,ImmOrderedMap,80.271,100,3,10000,Array,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.Collections.Generic.KeyValuePair`2[System.String,System.String]]","",MapRange,
RemoveRange,ImmOrderedMap,0.178,100,3,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","",MapRange,Some(0.6)
