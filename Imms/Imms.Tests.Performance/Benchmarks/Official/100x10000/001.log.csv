Test,Target,Time,Target_InitialSize,Iterations,DataSource_Size,DataSource_Type,Target_InitialGenerator,DataGenerator,Description,Class,Ratio
AddFirst,ImmList,2.146,100,10000,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","",Adds arbitrary items repeatedly to the beginning of the sequence.,DequeSingle,
AddLast,ImmList,2.240,100,10000,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","","",DequeSingle,
RemoveLast,ImmList,0.888,100,10000,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","","",DequeSingle,
RemoveFirst,ImmList,0.861,100,10000,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","","",DequeSingle,
Insert,ImmList,10.449,100,10000,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","","",IndexingSingle,
Remove,ImmList,3.478,100,10000,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","","",IndexingSingle,
Update,ImmList,2.751,100,10000,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","",Randomly updates items by index from the entire collection.,IndexingSingle,
IEnumerator,ImmList,0.448,100,10000,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","","",Iteration,
Lookup,ImmList,0.688,100,10000,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","",Randomly looks up {iters} items by index from the entire collection.,IndexingSingle,
AddLastRange,ImmList,1.760,100,3,10000,Array,"[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]",Adds a collection of items to the end {iters} times.,DequeRange,
AddFirstRange,ImmList,1.837,100,3,10000,Array,"[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]",Adds a collection of items to the beginning {iters} times.,DequeRange,
Insert Range,ImmList,1.938,100,3,10000,Array,"[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","",IndexingRange,
AddLastRange (concat),ImmList,0.012,100,3,10000,ImmList,"[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]",Adds a collection of items to the end {iters} times.,DequeRange,
AddFirstRange (concat),ImmList,0.009,100,3,10000,ImmList,"[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]",Adds a collection of items to the beginning {iters} times.,DequeRange,
Insert Range (concat),ImmList,0.017,100,3,10000,ImmList,"[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","",IndexingRange,
Take,ImmList,0.003,100,3,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","","Returns a starting subsequence consisting of a random number of items (from the entire collection), {iters} times.",Subsequence,
Skip,ImmList,0.003,100,3,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","","",Subsequence,
Iterate,ImmList,0.001,100,1,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","","",Iteration,
AddLast,ImmVector,2.286,100,10000,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","","",DequeSingle,
RemoveLast,ImmVector,1.172,100,10000,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","","",DequeSingle,
IEnumerator,ImmVector,0.073,100,10000,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","","",Iteration,
Lookup,ImmVector,0.362,100,10000,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","",Randomly looks up {iters} items by index from the entire collection.,IndexingSingle,
Update,ImmVector,1.690,100,10000,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","",Randomly updates items by index from the entire collection.,IndexingSingle,
AddLastRange,ImmVector,0.112,100,3,10000,Array,"[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]",Adds a collection of items to the end {iters} times.,DequeRange,
AddFirstRange,ImmVector,0.391,100,3,10000,Array,"[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]",Adds a collection of items to the beginning {iters} times.,DequeRange,
Insert Range,ImmVector,0.216,100,3,10000,Array,"[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","",IndexingRange,
AddLastRange (concat),ImmVector,0.283,100,3,10000,ImmVector,"[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]",Adds a collection of items to the end {iters} times.,DequeRange,
AddFirstRange (concat),ImmVector,0.277,100,3,10000,ImmVector,"[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]",Adds a collection of items to the beginning {iters} times.,DequeRange,
Insert Range (concat),ImmVector,0.403,100,3,10000,ImmVector,"[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","",IndexingRange,
Take,ImmVector,0.001,100,3,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","","Returns a starting subsequence consisting of a random number of items (from the entire collection), {iters} times.",Subsequence,
Skip,ImmVector,0.003,100,3,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","","",Subsequence,
Iterate,ImmVector,0.001,100,1,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","","",Iteration,
AddFirst,System.ImmutableList,8.137,100,10000,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","",Adds arbitrary items repeatedly to the beginning of the sequence.,DequeSingle,
AddLast,System.ImmutableList,8.068,100,10000,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","","",DequeSingle,
IEnumerator,System.ImmutableList,1.786,100,10000,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","","",Iteration,
RemoveFirst,System.ImmutableList,2.387,100,10000,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","","",DequeSingle,
RemoveLast,System.ImmutableList,2.262,100,10000,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","","",DequeSingle,
Insert,System.ImmutableList,9.494,100,10000,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","","",IndexingSingle,
Remove,System.ImmutableList,2.970,100,10000,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","","",IndexingSingle,
Update,System.ImmutableList,2.148,100,10000,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","",Randomly updates items by index from the entire collection.,IndexingSingle,
Lookup,System.ImmutableList,0.422,100,10000,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","",Randomly looks up {iters} items by index from the entire collection.,IndexingSingle,
AddLastRange (concat),System.ImmutableList,21.355,100,3,10000,System.ImmutableList,"[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]",Adds a collection of items to the end {iters} times.,DequeRange,
AddFirstRange (concat),System.ImmutableList,22.629,100,3,10000,System.ImmutableList,"[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]",Adds a collection of items to the beginning {iters} times.,DequeRange,
Insert Range (concat),System.ImmutableList,23.179,100,3,10000,System.ImmutableList,"[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","",IndexingRange,
AddLastRange,System.ImmutableList,15.390,100,3,10000,Array,"[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]",Adds a collection of items to the end {iters} times.,DequeRange,
AddFirstRange,System.ImmutableList,15.947,100,3,10000,Array,"[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]",Adds a collection of items to the beginning {iters} times.,DequeRange,
Insert Range,System.ImmutableList,17.161,100,3,10000,Array,"[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","",IndexingRange,
Take,System.ImmutableList,0.009,100,3,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","","Returns a starting subsequence consisting of a random number of items (from the entire collection), {iters} times.",Subsequence,
Skip,System.ImmutableList,0.010,100,3,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","","",Subsequence,
Iterate,System.ImmutableList,0.021,100,1,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","","",Iteration,
AddFirst,FSharpx.Deque,0.479,100,10000,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","",Adds arbitrary items repeatedly to the beginning of the sequence.,DequeSingle,
AddLast,FSharpx.Deque,0.483,100,10000,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","","",DequeSingle,
IEnumerator,FSharpx.Deque,0.226,100,10000,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","","",Iteration,
RemoveLast,FSharpx.Deque,0.892,100,10000,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","","",DequeSingle,
RemoveFirst,FSharpx.Deque,0.372,100,10000,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","","",DequeSingle,
AddLastRange,FSharpx.Deque,1.853,100,3,10000,Array,"[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]",Adds a collection of items to the end {iters} times.,DequeRange,
AddFirstRange,FSharpx.Deque,1.993,100,3,10000,Array,"[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]",Adds a collection of items to the beginning {iters} times.,DequeRange,
AddLastRange (concat),FSharpx.Deque,2.332,100,3,10000,FSharpx.Deque,"[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]",Adds a collection of items to the end {iters} times.,DequeRange,
AddFirstRange (concat),FSharpx.Deque,2.469,100,3,10000,FSharpx.Deque,"[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]",Adds a collection of items to the beginning {iters} times.,DequeRange,
Iterate,FSharpx.Deque,0.004,100,1,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","","",Iteration,
AddLast,FSharpx.Vector,1.436,100,10000,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","","",DequeSingle,
RemoveLast,FSharpx.Vector,4.275,100,10000,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","","",DequeSingle,
IEnumerator,FSharpx.Vector,0.158,100,10000,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","","",Iteration,
Lookup,FSharpx.Vector,0.179,100,10000,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","",Randomly looks up {iters} items by index from the entire collection.,IndexingSingle,
Update,FSharpx.Vector,3.359,100,10000,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","",Randomly updates items by index from the entire collection.,IndexingSingle,
AddLastRange,FSharpx.Vector,6.751,100,3,10000,Array,"[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]",Adds a collection of items to the end {iters} times.,DequeRange,
AddLastRange (concat),FSharpx.Vector,6.879,100,3,10000,FSharpx.Vector,"[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]",Adds a collection of items to the end {iters} times.,DequeRange,
Iterate,FSharpx.Vector,0.003,100,1,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","","",Iteration,
Union,System.ImmutableSet,43.856,100,3,10000,System.ImmutableSet,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]",Computes the set-theoretic union with another data structure {iters} times.,SetOperation,
Intersection,System.ImmutableSet,15.645,100,3,10000,System.ImmutableSet,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]",Computes the set-theoretic intersection with another data structure {iters} times.,SetOperation,
Except,System.ImmutableSet,16.171,100,3,10000,System.ImmutableSet,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]",Computes the set-theoretic relative complement (or Except) operation.,SetOperation,
Difference,System.ImmutableSet,47.848,100,3,10000,System.ImmutableSet,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]",Computes the set-theoretic symmetric difference operation.,SetOperation,
IsProperSubset,System.ImmutableSet,16.928,100,3,10000,System.ImmutableSet,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]",Determines the Subset relation.,SetRelation,
IsProperSuperset,System.ImmutableSet,0.008,100,3,10000,System.ImmutableSet,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]",Determines the Superset relation.,SetRelation,
SetEquals,System.ImmutableSet,14.281,100,3,10000,System.ImmutableSet,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","Determines if this set equals another data structure, {iters} times.",SetRelation,
Add,System.ImmutableSet,64.296,100,3,10000,Array,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","",SetSingle,
Contains,System.ImmutableSet,1.360,100,10000,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","Determines if a random element of the set is part of it, {iters} times.",SetSingle,
Remove,System.ImmutableSet,7.665,100,10000,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","",SetSingle,
IEnumerator,System.ImmutableSet,3.702,100,10000,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","",Iteration,
AddRange,System.ImmutableSet,32.131,100,3,10000,Array,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","",SetRange,
RemoveRange,System.ImmutableSet,0.104,100,3,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","",SetRange,Some(0.6)
Iterate,System.ImmutableSet,0.053,100,1,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","",Iteration,
Union,FSharp.Set,0.395,100,3,10000,FSharp.Set,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]",Computes the set-theoretic union with another data structure {iters} times.,SetOperation,
Intersection,FSharp.Set,3.474,100,3,10000,FSharp.Set,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]",Computes the set-theoretic intersection with another data structure {iters} times.,SetOperation,
Except,FSharp.Set,17.115,100,3,10000,FSharp.Set,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]",Computes the set-theoretic relative complement (or Except) operation.,SetOperation,
Difference,FSharp.Set,18.364,100,3,10000,FSharp.Set,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]",Computes the set-theoretic symmetric difference operation.,SetOperation,
IsProperSubset,FSharp.Set,0.002,100,3,10000,FSharp.Set,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]",Determines the Subset relation.,SetRelation,
IsProperSuperset,FSharp.Set,0.002,100,3,10000,FSharp.Set,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]",Determines the Superset relation.,SetRelation,
SetEquals,FSharp.Set,0.006,100,3,10000,FSharp.Set,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","Determines if this set equals another data structure, {iters} times.",SetRelation,
Add,FSharp.Set,47.892,100,3,10000,Array,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","",SetSingle,
Contains,FSharp.Set,1.030,100,10000,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","Determines if a random element of the set is part of it, {iters} times.",SetSingle,
Remove,FSharp.Set,3.896,100,10000,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","",SetSingle,
IEnumerator,FSharp.Set,0.610,100,10000,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","",Iteration,
AddRange,FSharp.Set,47.515,100,3,10000,Array,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","",SetRange,
RemoveRange,FSharp.Set,0.096,100,3,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","",SetRange,Some(0.6)
Iterate,FSharp.Set,0.010,100,1,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","",Iteration,
Union,ImmSet,0.282,100,3,10000,ImmSet,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]",Computes the set-theoretic union with another data structure {iters} times.,SetOperation,
Intersection,ImmSet,0.226,100,3,10000,ImmSet,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]",Computes the set-theoretic intersection with another data structure {iters} times.,SetOperation,
Except,ImmSet,0.327,100,3,10000,ImmSet,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]",Computes the set-theoretic relative complement (or Except) operation.,SetOperation,
Difference,ImmSet,0.686,100,3,10000,ImmSet,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]",Computes the set-theoretic symmetric difference operation.,SetOperation,
IsProperSubset,ImmSet,0.006,100,3,10000,ImmSet,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]",Determines the Subset relation.,SetRelation,
IsProperSuperset,ImmSet,0.001,100,3,10000,ImmSet,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]",Determines the Superset relation.,SetRelation,
SetEquals,ImmSet,0.002,100,3,10000,ImmSet,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","Determines if this set equals another data structure, {iters} times.",SetRelation,
Add,ImmSet,43.781,100,3,10000,Array,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","",SetSingle,
Contains,ImmSet,0.566,100,10000,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","Determines if a random element of the set is part of it, {iters} times.",SetSingle,
Remove,ImmSet,3.106,100,10000,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","",SetSingle,
IEnumerator,ImmSet,0.852,100,10000,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","",Iteration,
AddRange,ImmSet,15.273,100,3,10000,Array,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","",SetRange,
RemoveRange,ImmSet,0.039,100,3,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","",SetRange,Some(0.6)
Iterate,ImmSet,0.004,100,1,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","",Iteration,
Union,ImmOrderedSet,0.613,100,3,10000,ImmOrderedSet,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]",Computes the set-theoretic union with another data structure {iters} times.,SetOperation,
Intersection,ImmOrderedSet,0.912,100,3,10000,ImmOrderedSet,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]",Computes the set-theoretic intersection with another data structure {iters} times.,SetOperation,
Except,ImmOrderedSet,0.510,100,3,10000,ImmOrderedSet,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]",Computes the set-theoretic relative complement (or Except) operation.,SetOperation,
Difference,ImmOrderedSet,1.572,100,3,10000,ImmOrderedSet,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]",Computes the set-theoretic symmetric difference operation.,SetOperation,
IsProperSubset,ImmOrderedSet,0.009,100,3,10000,ImmOrderedSet,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]",Determines the Subset relation.,SetRelation,
IsProperSuperset,ImmOrderedSet,0.001,100,3,10000,ImmOrderedSet,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]",Determines the Superset relation.,SetRelation,
SetEquals,ImmOrderedSet,0.001,100,3,10000,ImmOrderedSet,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","Determines if this set equals another data structure, {iters} times.",SetRelation,
Add,ImmOrderedSet,75.199,100,3,10000,Array,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","",SetSingle,
Contains,ImmOrderedSet,7.678,100,10000,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","Determines if a random element of the set is part of it, {iters} times.",SetSingle,
Remove,ImmOrderedSet,10.715,100,10000,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","",SetSingle,
IEnumerator,ImmOrderedSet,0.747,100,10000,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","",Iteration,
AddRange,ImmOrderedSet,41.317,100,3,10000,Array,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","",SetRange,
RemoveRange,ImmOrderedSet,0.146,100,3,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","",SetRange,Some(0.6)
Iterate,ImmOrderedSet,0.001,100,1,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","",Iteration,
Union,System.ImmutableSortedSet,0.802,100,3,10000,System.ImmutableSortedSet,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]",Computes the set-theoretic union with another data structure {iters} times.,SetOperation,
Intersection,System.ImmutableSortedSet,39.116,100,3,10000,System.ImmutableSortedSet,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]",Computes the set-theoretic intersection with another data structure {iters} times.,SetOperation,
Except,System.ImmutableSortedSet,37.829,100,3,10000,System.ImmutableSortedSet,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]",Computes the set-theoretic relative complement (or Except) operation.,SetOperation,
Difference,System.ImmutableSortedSet,126.132,100,3,10000,System.ImmutableSortedSet,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]",Computes the set-theoretic symmetric difference operation.,SetOperation,
IsProperSubset,System.ImmutableSortedSet,75.305,100,3,10000,System.ImmutableSortedSet,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]",Determines the Subset relation.,SetRelation,
IsProperSuperset,System.ImmutableSortedSet,0.011,100,3,10000,System.ImmutableSortedSet,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]",Determines the Superset relation.,SetRelation,
SetEquals,System.ImmutableSortedSet,49.086,100,3,10000,System.ImmutableSortedSet,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","Determines if this set equals another data structure, {iters} times.",SetRelation,
Add,System.ImmutableSortedSet,87.077,100,3,10000,Array,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","",SetSingle,
Contains,System.ImmutableSortedSet,7.742,100,10000,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","Determines if a random element of the set is part of it, {iters} times.",SetSingle,
Remove,System.ImmutableSortedSet,11.961,100,10000,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","",SetSingle,
IEnumerator,System.ImmutableSortedSet,2.460,100,10000,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","",Iteration,
AddRange,System.ImmutableSortedSet,57.689,100,3,10000,Array,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","",SetRange,
RemoveRange,System.ImmutableSortedSet,0.181,100,3,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","",SetRange,Some(0.6)
Iterate,System.ImmutableSortedSet,0.037,100,1,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","",Iteration,
Lookup,ImmMap,0.612,100,10000,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","",MapSingle,
IEnumerator,ImmMap,0.733,100,10000,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","",Iteration,
RemoveKey,ImmMap,3.548,100,10000,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","",MapSingle,
Add,ImmMap,43.253,100,3,10000,Array,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","",MapSingle,
Iterate,ImmMap,0.005,100,1,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","",Iteration,
AddRange,ImmMap,17.554,100,3,10000,Array,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.Collections.Generic.KeyValuePair`2[System.String,System.String]]","",MapRange,
RemoveRange,ImmMap,0.040,100,3,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","",MapRange,Some(0.6)
Lookup,System.ImmutableDict,2.005,100,10000,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","",MapSingle,
IEnumerator,System.ImmutableDict,3.800,100,10000,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","",Iteration,
RemoveKey,System.ImmutableDict,11.788,100,10000,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","",MapSingle,
Add,System.ImmutableDict,80.182,100,3,10000,Array,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","",MapSingle,
Iterate,System.ImmutableDict,0.046,100,1,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","",Iteration,
AddRange,System.ImmutableDict,37.825,100,3,10000,Array,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.Collections.Generic.KeyValuePair`2[System.String,System.String]]","",MapRange,
RemoveRange,System.ImmutableDict,0.107,100,3,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","",MapRange,Some(0.6)
Lookup,FSharp.Map,1.127,100,10000,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","",MapSingle,
IEnumerator,FSharp.Map,0.657,100,10000,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","",Iteration,
RemoveKey,FSharp.Map,5.571,100,10000,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","",MapSingle,
Add,FSharp.Map,49.194,100,3,10000,Array,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","",MapSingle,
Iterate,FSharp.Map,0.012,100,1,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","",Iteration,
AddRange,FSharp.Map,50.536,100,3,10000,Array,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.Collections.Generic.KeyValuePair`2[System.String,System.String]]","",MapRange,
RemoveRange,FSharp.Map,0.095,100,3,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","",MapRange,Some(0.6)
Lookup,System.ImmutableSortedDict,6.943,100,10000,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","",MapSingle,
IEnumerator,System.ImmutableSortedDict,2.128,100,10000,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","",Iteration,
RemoveKey,System.ImmutableSortedDict,12.896,100,10000,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","",MapSingle,
Add,System.ImmutableSortedDict,82.397,100,3,10000,Array,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","",MapSingle,
Iterate,System.ImmutableSortedDict,0.030,100,1,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","",Iteration,
AddRange,System.ImmutableSortedDict,62.562,100,3,10000,Array,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.Collections.Generic.KeyValuePair`2[System.String,System.String]]","",MapRange,
RemoveRange,System.ImmutableSortedDict,0.186,100,3,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","",MapRange,Some(0.6)
Lookup,ImmOrderedMap,6.729,100,10000,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","",MapSingle,
IEnumerator,ImmOrderedMap,0.642,100,10000,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","",Iteration,
RemoveKey,ImmOrderedMap,9.847,100,10000,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","",MapSingle,
Add,ImmOrderedMap,77.694,100,3,10000,Array,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","",MapSingle,
Iterate,ImmOrderedMap,0.005,100,1,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","",Iteration,
AddRange,ImmOrderedMap,47.715,100,3,10000,Array,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.Collections.Generic.KeyValuePair`2[System.String,System.String]]","",MapRange,
RemoveRange,ImmOrderedMap,0.144,100,3,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","",MapRange,Some(0.6)
