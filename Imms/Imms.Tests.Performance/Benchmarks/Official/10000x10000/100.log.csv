Test,Target,Time,Target_InitialSize,Iterations,DataSource_Size,DataSource_Type,Target_InitialGenerator,DataGenerator,Description,Class,Ratio
AddFirst,ImmList,2.235,10000,10000,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","",Adds arbitrary items repeatedly to the beginning of the sequence.,DequeSingle,
AddLast,ImmList,2.393,10000,10000,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","","",DequeSingle,
RemoveLast,ImmList,1.195,10000,10000,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","","",DequeSingle,
RemoveFirst,ImmList,1.111,10000,10000,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","","",DequeSingle,
Insert,ImmList,16.634,10000,10000,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","","",IndexingSingle,
Remove,ImmList,11.933,10000,10000,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","","",IndexingSingle,
Update,ImmList,7.970,10000,10000,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","",Randomly updates items by index from the entire collection.,IndexingSingle,
IEnumerator,ImmList,0.449,10000,10000,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","","",Iteration,
Lookup,ImmList,1.668,10000,10000,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","",Randomly looks up {iters} items by index from the entire collection.,IndexingSingle,
AddLastRange,ImmList,1.842,10000,3,10000,Array,"[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]",Adds a collection of items to the end {iters} times.,DequeRange,
AddFirstRange,ImmList,1.726,10000,3,10000,Array,"[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]",Adds a collection of items to the beginning {iters} times.,DequeRange,
Insert Range,ImmList,1.714,10000,3,10000,Array,"[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","",IndexingRange,
AddLastRange (concat),ImmList,0.011,10000,3,10000,ImmList,"[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]",Adds a collection of items to the end {iters} times.,DequeRange,
AddFirstRange (concat),ImmList,0.012,10000,3,10000,ImmList,"[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]",Adds a collection of items to the beginning {iters} times.,DequeRange,
Insert Range (concat),ImmList,0.020,10000,3,10000,ImmList,"[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","",IndexingRange,
Take,ImmList,0.006,10000,3,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","","Returns a starting subsequence consisting of a random number of items (from the entire collection), {iters} times.",Subsequence,
Skip,ImmList,0.006,10000,3,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","","",Subsequence,
Iterate,ImmList,0.092,10000,1,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","","",Iteration,
AddLast,ImmVector,2.486,10000,10000,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","","",DequeSingle,
RemoveLast,ImmVector,2.236,10000,10000,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","","",DequeSingle,
IEnumerator,ImmVector,0.113,10000,10000,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","","",Iteration,
Lookup,ImmVector,0.422,10000,10000,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","",Randomly looks up {iters} items by index from the entire collection.,IndexingSingle,
Update,ImmVector,2.697,10000,10000,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","",Randomly updates items by index from the entire collection.,IndexingSingle,
AddLastRange,ImmVector,0.105,10000,3,10000,Array,"[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]",Adds a collection of items to the end {iters} times.,DequeRange,
AddFirstRange,ImmVector,0.647,10000,3,10000,Array,"[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]",Adds a collection of items to the beginning {iters} times.,DequeRange,
Insert Range,ImmVector,0.527,10000,3,10000,Array,"[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","",IndexingRange,
AddLastRange (concat),ImmVector,0.275,10000,3,10000,ImmVector,"[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]",Adds a collection of items to the end {iters} times.,DequeRange,
AddFirstRange (concat),ImmVector,0.607,10000,3,10000,ImmVector,"[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]",Adds a collection of items to the beginning {iters} times.,DequeRange,
Insert Range (concat),ImmVector,0.705,10000,3,10000,ImmVector,"[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","",IndexingRange,
Take,ImmVector,0.002,10000,3,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","","Returns a starting subsequence consisting of a random number of items (from the entire collection), {iters} times.",Subsequence,
Skip,ImmVector,0.210,10000,3,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","","",Subsequence,
Iterate,ImmVector,0.030,10000,1,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","","",Iteration,
AddFirst,System.ImmutableList,10.590,10000,10000,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","",Adds arbitrary items repeatedly to the beginning of the sequence.,DequeSingle,
AddLast,System.ImmutableList,10.024,10000,10000,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","","",DequeSingle,
IEnumerator,System.ImmutableList,1.711,10000,10000,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","","",Iteration,
RemoveFirst,System.ImmutableList,5.064,10000,10000,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","","",DequeSingle,
RemoveLast,System.ImmutableList,5.000,10000,10000,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","","",DequeSingle,
Insert,System.ImmutableList,14.049,10000,10000,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","","",IndexingSingle,
Remove,System.ImmutableList,9.455,10000,10000,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","","",IndexingSingle,
Update,System.ImmutableList,5.362,10000,10000,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","",Randomly updates items by index from the entire collection.,IndexingSingle,
Lookup,System.ImmutableList,1.264,10000,10000,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","",Randomly looks up {iters} items by index from the entire collection.,IndexingSingle,
AddLastRange (concat),System.ImmutableList,25.257,10000,3,10000,System.ImmutableList,"[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]",Adds a collection of items to the end {iters} times.,DequeRange,
AddFirstRange (concat),System.ImmutableList,24.164,10000,3,10000,System.ImmutableList,"[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]",Adds a collection of items to the beginning {iters} times.,DequeRange,
Insert Range (concat),System.ImmutableList,27.007,10000,3,10000,System.ImmutableList,"[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","",IndexingRange,
AddLastRange,System.ImmutableList,18.593,10000,3,10000,Array,"[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]",Adds a collection of items to the end {iters} times.,DequeRange,
AddFirstRange,System.ImmutableList,18.454,10000,3,10000,Array,"[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]",Adds a collection of items to the beginning {iters} times.,DequeRange,
Insert Range,System.ImmutableList,20.235,10000,3,10000,Array,"[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","",IndexingRange,
Take,System.ImmutableList,0.734,10000,3,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","","Returns a starting subsequence consisting of a random number of items (from the entire collection), {iters} times.",Subsequence,
Skip,System.ImmutableList,2.477,10000,3,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","","",Subsequence,
Iterate,System.ImmutableList,2.441,10000,1,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","","",Iteration,
AddFirst,FSharpx.Deque,0.471,10000,10000,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","",Adds arbitrary items repeatedly to the beginning of the sequence.,DequeSingle,
AddLast,FSharpx.Deque,0.415,10000,10000,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","","",DequeSingle,
IEnumerator,FSharpx.Deque,0.179,10000,10000,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","","",Iteration,
RemoveLast,FSharpx.Deque,1.262,10000,10000,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","","",DequeSingle,
RemoveFirst,FSharpx.Deque,0.345,10000,10000,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","","",DequeSingle,
AddLastRange,FSharpx.Deque,1.927,10000,3,10000,Array,"[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]",Adds a collection of items to the end {iters} times.,DequeRange,
AddFirstRange,FSharpx.Deque,1.978,10000,3,10000,Array,"[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]",Adds a collection of items to the beginning {iters} times.,DequeRange,
AddLastRange (concat),FSharpx.Deque,2.275,10000,3,10000,FSharpx.Deque,"[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]",Adds a collection of items to the end {iters} times.,DequeRange,
AddFirstRange (concat),FSharpx.Deque,2.912,10000,3,10000,FSharpx.Deque,"[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]",Adds a collection of items to the beginning {iters} times.,DequeRange,
Iterate,FSharpx.Deque,0.233,10000,1,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","","",Iteration,
AddLast,FSharpx.Vector,1.192,10000,10000,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","","",DequeSingle,
RemoveLast,FSharpx.Vector,5.118,10000,10000,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","","",DequeSingle,
IEnumerator,FSharpx.Vector,0.150,10000,10000,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","","",Iteration,
Lookup,FSharpx.Vector,0.309,10000,10000,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","",Randomly looks up {iters} items by index from the entire collection.,IndexingSingle,
Update,FSharpx.Vector,6.373,10000,10000,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","",Randomly updates items by index from the entire collection.,IndexingSingle,
AddLastRange,FSharpx.Vector,6.378,10000,3,10000,Array,"[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]",Adds a collection of items to the end {iters} times.,DequeRange,
AddLastRange (concat),FSharpx.Vector,6.786,10000,3,10000,FSharpx.Vector,"[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]",Adds a collection of items to the end {iters} times.,DequeRange,
Iterate,FSharpx.Vector,0.202,10000,1,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","","",Iteration,
Union,System.ImmutableSet,55.454,10000,3,10000,System.ImmutableSet,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]",Computes the set-theoretic union with another data structure {iters} times.,SetOperation,
Intersection,System.ImmutableSet,20.388,10000,3,10000,System.ImmutableSet,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]",Computes the set-theoretic intersection with another data structure {iters} times.,SetOperation,
Except,System.ImmutableSet,21.424,10000,3,10000,System.ImmutableSet,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]",Computes the set-theoretic relative complement (or Except) operation.,SetOperation,
Difference,System.ImmutableSet,117.573,10000,3,10000,System.ImmutableSet,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]",Computes the set-theoretic symmetric difference operation.,SetOperation,
IsProperSubset,System.ImmutableSet,15.469,10000,3,10000,System.ImmutableSet,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]",Determines the Subset relation.,SetRelation,
IsProperSuperset,System.ImmutableSet,0.008,10000,3,10000,System.ImmutableSet,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]",Determines the Superset relation.,SetRelation,
SetEquals,System.ImmutableSet,16.117,10000,3,10000,System.ImmutableSet,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","Determines if this set equals another data structure, {iters} times.",SetRelation,
Add,System.ImmutableSet,86.627,10000,3,10000,Array,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","",SetSingle,
Contains,System.ImmutableSet,2.480,10000,10000,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","Determines if a random element of the set is part of it, {iters} times.",SetSingle,
Remove,System.ImmutableSet,18.031,10000,10000,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","",SetSingle,
IEnumerator,System.ImmutableSet,3.816,10000,10000,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","",Iteration,
AddRange,System.ImmutableSet,42.993,10000,3,10000,Array,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","",SetRange,
RemoveRange,System.ImmutableSet,19.312,10000,3,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","",SetRange,Some(0.6)
Iterate,System.ImmutableSet,5.066,10000,1,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","",Iteration,
Union,FSharp.Set,23.541,10000,3,10000,FSharp.Set,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]",Computes the set-theoretic union with another data structure {iters} times.,SetOperation,
Intersection,FSharp.Set,11.168,10000,3,10000,FSharp.Set,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]",Computes the set-theoretic intersection with another data structure {iters} times.,SetOperation,
Except,FSharp.Set,51.651,10000,3,10000,FSharp.Set,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]",Computes the set-theoretic relative complement (or Except) operation.,SetOperation,
Difference,FSharp.Set,129.810,10000,3,10000,FSharp.Set,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]",Computes the set-theoretic symmetric difference operation.,SetOperation,
IsProperSubset,FSharp.Set,0.002,10000,3,10000,FSharp.Set,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]",Determines the Subset relation.,SetRelation,
IsProperSuperset,FSharp.Set,0.002,10000,3,10000,FSharp.Set,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]",Determines the Superset relation.,SetRelation,
SetEquals,FSharp.Set,0.007,10000,3,10000,FSharp.Set,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","Determines if this set equals another data structure, {iters} times.",SetRelation,
Add,FSharp.Set,67.382,10000,3,10000,Array,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","",SetSingle,
Contains,FSharp.Set,3.255,10000,10000,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","Determines if a random element of the set is part of it, {iters} times.",SetSingle,
Remove,FSharp.Set,8.921,10000,10000,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","",SetSingle,
IEnumerator,FSharp.Set,0.657,10000,10000,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","",Iteration,
AddRange,FSharp.Set,68.505,10000,3,10000,Array,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","",SetRange,
RemoveRange,FSharp.Set,29.285,10000,3,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","",SetRange,Some(0.6)
Iterate,FSharp.Set,0.746,10000,1,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","",Iteration,
Union,ImmSet,17.497,10000,3,10000,ImmSet,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]",Computes the set-theoretic union with another data structure {iters} times.,SetOperation,
Intersection,ImmSet,9.450,10000,3,10000,ImmSet,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]",Computes the set-theoretic intersection with another data structure {iters} times.,SetOperation,
Except,ImmSet,16.181,10000,3,10000,ImmSet,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]",Computes the set-theoretic relative complement (or Except) operation.,SetOperation,
Difference,ImmSet,58.015,10000,3,10000,ImmSet,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]",Computes the set-theoretic symmetric difference operation.,SetOperation,
IsProperSubset,ImmSet,0.001,10000,3,10000,ImmSet,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]",Determines the Subset relation.,SetRelation,
IsProperSuperset,ImmSet,0.001,10000,3,10000,ImmSet,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]",Determines the Superset relation.,SetRelation,
SetEquals,ImmSet,0.005,10000,3,10000,ImmSet,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","Determines if this set equals another data structure, {iters} times.",SetRelation,
Add,ImmSet,62.399,10000,3,10000,Array,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","",SetSingle,
Contains,ImmSet,1.808,10000,10000,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","Determines if a random element of the set is part of it, {iters} times.",SetSingle,
Remove,ImmSet,7.878,10000,10000,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","",SetSingle,
IEnumerator,ImmSet,0.997,10000,10000,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","",Iteration,
AddRange,ImmSet,56.196,10000,3,10000,Array,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","",SetRange,
RemoveRange,ImmSet,21.661,10000,3,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","",SetRange,Some(0.6)
Iterate,ImmSet,0.234,10000,1,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","",Iteration,
Union,ImmOrderedSet,28.834,10000,3,10000,ImmOrderedSet,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]",Computes the set-theoretic union with another data structure {iters} times.,SetOperation,
Intersection,ImmOrderedSet,40.261,10000,3,10000,ImmOrderedSet,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]",Computes the set-theoretic intersection with another data structure {iters} times.,SetOperation,
Except,ImmOrderedSet,26.349,10000,3,10000,ImmOrderedSet,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]",Computes the set-theoretic relative complement (or Except) operation.,SetOperation,
Difference,ImmOrderedSet,86.887,10000,3,10000,ImmOrderedSet,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]",Computes the set-theoretic symmetric difference operation.,SetOperation,
IsProperSubset,ImmOrderedSet,0.001,10000,3,10000,ImmOrderedSet,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]",Determines the Subset relation.,SetRelation,
IsProperSuperset,ImmOrderedSet,0.001,10000,3,10000,ImmOrderedSet,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]",Determines the Superset relation.,SetRelation,
SetEquals,ImmOrderedSet,0.007,10000,3,10000,ImmOrderedSet,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","Determines if this set equals another data structure, {iters} times.",SetRelation,
Add,ImmOrderedSet,109.937,10000,3,10000,Array,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","",SetSingle,
Contains,ImmOrderedSet,16.887,10000,10000,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","Determines if a random element of the set is part of it, {iters} times.",SetSingle,
Remove,ImmOrderedSet,24.002,10000,10000,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","",SetSingle,
IEnumerator,ImmOrderedSet,0.797,10000,10000,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","",Iteration,
AddRange,ImmOrderedSet,75.433,10000,3,10000,Array,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","",SetRange,
RemoveRange,ImmOrderedSet,49.730,10000,3,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","",SetRange,Some(0.6)
Iterate,ImmOrderedSet,0.120,10000,1,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","",Iteration,
Union,System.ImmutableSortedSet,98.149,10000,3,10000,System.ImmutableSortedSet,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]",Computes the set-theoretic union with another data structure {iters} times.,SetOperation,
Intersection,System.ImmutableSortedSet,72.092,10000,3,10000,System.ImmutableSortedSet,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]",Computes the set-theoretic intersection with another data structure {iters} times.,SetOperation,
Except,System.ImmutableSortedSet,81.761,10000,3,10000,System.ImmutableSortedSet,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]",Computes the set-theoretic relative complement (or Except) operation.,SetOperation,
Difference,System.ImmutableSortedSet,329.102,10000,3,10000,System.ImmutableSortedSet,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]",Computes the set-theoretic symmetric difference operation.,SetOperation,
IsProperSubset,System.ImmutableSortedSet,53.965,10000,3,10000,System.ImmutableSortedSet,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]",Determines the Subset relation.,SetRelation,
IsProperSuperset,System.ImmutableSortedSet,0.019,10000,3,10000,System.ImmutableSortedSet,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]",Determines the Superset relation.,SetRelation,
SetEquals,System.ImmutableSortedSet,53.300,10000,3,10000,System.ImmutableSortedSet,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","Determines if this set equals another data structure, {iters} times.",SetRelation,
Add,System.ImmutableSortedSet,107.384,10000,3,10000,Array,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","",SetSingle,
Contains,System.ImmutableSortedSet,17.311,10000,10000,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","Determines if a random element of the set is part of it, {iters} times.",SetSingle,
Remove,System.ImmutableSortedSet,28.086,10000,10000,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","",SetSingle,
IEnumerator,System.ImmutableSortedSet,2.508,10000,10000,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","",Iteration,
AddRange,System.ImmutableSortedSet,84.234,10000,3,10000,Array,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","",SetRange,
RemoveRange,System.ImmutableSortedSet,44.660,10000,3,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","",SetRange,Some(0.6)
Iterate,System.ImmutableSortedSet,3.120,10000,1,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","",Iteration,
Lookup,ImmMap,1.816,10000,10000,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","",MapSingle,
IEnumerator,ImmMap,0.873,10000,10000,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","",Iteration,
RemoveKey,ImmMap,10.061,10000,10000,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","",MapSingle,
Add,ImmMap,59.558,10000,3,10000,Array,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","",MapSingle,
Iterate,ImmMap,0.418,10000,1,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","",Iteration,
AddRange,ImmMap,70.916,10000,3,10000,Array,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.Collections.Generic.KeyValuePair`2[System.String,System.String]]","",MapRange,
RemoveRange,ImmMap,21.001,10000,3,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","",MapRange,Some(0.6)
Lookup,System.ImmutableDict,3.135,10000,10000,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","",MapSingle,
IEnumerator,System.ImmutableDict,4.422,10000,10000,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","",Iteration,
RemoveKey,System.ImmutableDict,26.467,10000,10000,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","",MapSingle,
Add,System.ImmutableDict,111.240,10000,3,10000,Array,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","",MapSingle,
Iterate,System.ImmutableDict,4.600,10000,1,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","",Iteration,
AddRange,System.ImmutableDict,53.706,10000,3,10000,Array,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.Collections.Generic.KeyValuePair`2[System.String,System.String]]","",MapRange,
RemoveRange,System.ImmutableDict,22.103,10000,3,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","",MapRange,Some(0.6)
Lookup,FSharp.Map,3.442,10000,10000,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","",MapSingle,
IEnumerator,FSharp.Map,0.654,10000,10000,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","",Iteration,
RemoveKey,FSharp.Map,15.506,10000,10000,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","",MapSingle,
Add,FSharp.Map,70.111,10000,3,10000,Array,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","",MapSingle,
Iterate,FSharp.Map,0.876,10000,1,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","",Iteration,
AddRange,FSharp.Map,69.119,10000,3,10000,Array,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.Collections.Generic.KeyValuePair`2[System.String,System.String]]","",MapRange,
RemoveRange,FSharp.Map,32.156,10000,3,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","",MapRange,Some(0.6)
Lookup,System.ImmutableSortedDict,17.459,10000,10000,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","",MapSingle,
IEnumerator,System.ImmutableSortedDict,2.149,10000,10000,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","",Iteration,
RemoveKey,System.ImmutableSortedDict,31.208,10000,10000,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","",MapSingle,
Add,System.ImmutableSortedDict,112.515,10000,3,10000,Array,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","",MapSingle,
Iterate,System.ImmutableSortedDict,2.754,10000,1,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","",Iteration,
AddRange,System.ImmutableSortedDict,83.715,10000,3,10000,Array,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.Collections.Generic.KeyValuePair`2[System.String,System.String]]","",MapRange,
RemoveRange,System.ImmutableSortedDict,45.454,10000,3,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","",MapRange,Some(0.6)
Lookup,ImmOrderedMap,16.774,10000,10000,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","",MapSingle,
IEnumerator,ImmOrderedMap,0.734,10000,10000,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","",Iteration,
RemoveKey,ImmOrderedMap,25.053,10000,10000,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","",MapSingle,
Add,ImmOrderedMap,111.013,10000,3,10000,Array,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","",MapSingle,
Iterate,ImmOrderedMap,0.276,10000,1,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","",Iteration,
AddRange,ImmOrderedMap,83.716,10000,3,10000,Array,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.Collections.Generic.KeyValuePair`2[System.String,System.String]]","",MapRange,
RemoveRange,ImmOrderedMap,50.792,10000,3,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","",MapRange,Some(0.6)
