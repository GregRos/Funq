Test,Target,Time,Target_InitialSize,Iterations,DataSource_Size,DataSource_Type,Target_InitialGenerator,DataGenerator,Description,Class,Ratio
AddFirst,ImmList,2.139,10000,10000,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","",Adds arbitrary items repeatedly to the beginning of the sequence.,DequeSingle,
AddLast,ImmList,2.006,10000,10000,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","","",DequeSingle,
RemoveLast,ImmList,0.969,10000,10000,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","","",DequeSingle,
RemoveFirst,ImmList,0.948,10000,10000,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","","",DequeSingle,
Insert,ImmList,14.892,10000,10000,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","","",IndexingSingle,
Remove,ImmList,10.395,10000,10000,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","","",IndexingSingle,
Update,ImmList,6.600,10000,10000,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","",Randomly updates items by index from the entire collection.,IndexingSingle,
IEnumerator,ImmList,0.425,10000,10000,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","","",Iteration,
Lookup,ImmList,1.548,10000,10000,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","",Randomly looks up {iters} items by index from the entire collection.,IndexingSingle,
AddLastRange,ImmList,1.834,10000,3,10000,Array,"[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]",Adds a collection of items to the end {iters} times.,DequeRange,
AddFirstRange,ImmList,1.651,10000,3,10000,Array,"[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]",Adds a collection of items to the beginning {iters} times.,DequeRange,
Insert Range,ImmList,1.793,10000,3,10000,Array,"[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","",IndexingRange,
AddLastRange (concat),ImmList,0.012,10000,3,10000,ImmList,"[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]",Adds a collection of items to the end {iters} times.,DequeRange,
AddFirstRange (concat),ImmList,0.011,10000,3,10000,ImmList,"[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]",Adds a collection of items to the beginning {iters} times.,DequeRange,
Insert Range (concat),ImmList,0.025,10000,3,10000,ImmList,"[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","",IndexingRange,
Take,ImmList,0.008,10000,3,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","","Returns a starting subsequence consisting of a random number of items (from the entire collection), {iters} times.",Subsequence,
Skip,ImmList,0.007,10000,3,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","","",Subsequence,
Iterate,ImmList,0.092,10000,1,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","","",Iteration,
AddLast,ImmVector,2.504,10000,10000,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","","",DequeSingle,
RemoveLast,ImmVector,2.210,10000,10000,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","","",DequeSingle,
IEnumerator,ImmVector,0.115,10000,10000,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","","",Iteration,
Lookup,ImmVector,0.415,10000,10000,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","",Randomly looks up {iters} items by index from the entire collection.,IndexingSingle,
Update,ImmVector,2.853,10000,10000,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","",Randomly updates items by index from the entire collection.,IndexingSingle,
AddLastRange,ImmVector,0.102,10000,3,10000,Array,"[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]",Adds a collection of items to the end {iters} times.,DequeRange,
AddFirstRange,ImmVector,0.640,10000,3,10000,Array,"[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]",Adds a collection of items to the beginning {iters} times.,DequeRange,
Insert Range,ImmVector,0.378,10000,3,10000,Array,"[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","",IndexingRange,
AddLastRange (concat),ImmVector,0.273,10000,3,10000,ImmVector,"[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]",Adds a collection of items to the end {iters} times.,DequeRange,
AddFirstRange (concat),ImmVector,0.538,10000,3,10000,ImmVector,"[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]",Adds a collection of items to the beginning {iters} times.,DequeRange,
Insert Range (concat),ImmVector,0.546,10000,3,10000,ImmVector,"[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","",IndexingRange,
Take,ImmVector,0.002,10000,3,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","","Returns a starting subsequence consisting of a random number of items (from the entire collection), {iters} times.",Subsequence,
Skip,ImmVector,0.161,10000,3,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","","",Subsequence,
Iterate,ImmVector,0.032,10000,1,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","","",Iteration,
AddFirst,System.ImmutableList,9.618,10000,10000,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","",Adds arbitrary items repeatedly to the beginning of the sequence.,DequeSingle,
AddLast,System.ImmutableList,9.508,10000,10000,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","","",DequeSingle,
IEnumerator,System.ImmutableList,1.612,10000,10000,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","","",Iteration,
RemoveFirst,System.ImmutableList,4.812,10000,10000,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","","",DequeSingle,
RemoveLast,System.ImmutableList,5.261,10000,10000,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","","",DequeSingle,
Insert,System.ImmutableList,11.690,10000,10000,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","","",IndexingSingle,
Remove,System.ImmutableList,8.048,10000,10000,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","","",IndexingSingle,
Update,System.ImmutableList,5.070,10000,10000,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","",Randomly updates items by index from the entire collection.,IndexingSingle,
Lookup,System.ImmutableList,1.161,10000,10000,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","",Randomly looks up {iters} items by index from the entire collection.,IndexingSingle,
AddLastRange (concat),System.ImmutableList,22.937,10000,3,10000,System.ImmutableList,"[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]",Adds a collection of items to the end {iters} times.,DequeRange,
AddFirstRange (concat),System.ImmutableList,22.520,10000,3,10000,System.ImmutableList,"[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]",Adds a collection of items to the beginning {iters} times.,DequeRange,
Insert Range (concat),System.ImmutableList,23.700,10000,3,10000,System.ImmutableList,"[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","",IndexingRange,
AddLastRange,System.ImmutableList,17.148,10000,3,10000,Array,"[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]",Adds a collection of items to the end {iters} times.,DequeRange,
AddFirstRange,System.ImmutableList,17.089,10000,3,10000,Array,"[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]",Adds a collection of items to the beginning {iters} times.,DequeRange,
Insert Range,System.ImmutableList,17.947,10000,3,10000,Array,"[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","",IndexingRange,
Take,System.ImmutableList,1.376,10000,3,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","","Returns a starting subsequence consisting of a random number of items (from the entire collection), {iters} times.",Subsequence,
Skip,System.ImmutableList,1.817,10000,3,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","","",Subsequence,
Iterate,System.ImmutableList,1.923,10000,1,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","","",Iteration,
AddFirst,FSharpx.Deque,0.448,10000,10000,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","",Adds arbitrary items repeatedly to the beginning of the sequence.,DequeSingle,
AddLast,FSharpx.Deque,0.414,10000,10000,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","","",DequeSingle,
IEnumerator,FSharpx.Deque,0.172,10000,10000,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","","",Iteration,
RemoveLast,FSharpx.Deque,1.208,10000,10000,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","","",DequeSingle,
RemoveFirst,FSharpx.Deque,0.330,10000,10000,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","","",DequeSingle,
AddLastRange,FSharpx.Deque,1.802,10000,3,10000,Array,"[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]",Adds a collection of items to the end {iters} times.,DequeRange,
AddFirstRange,FSharpx.Deque,1.987,10000,3,10000,Array,"[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]",Adds a collection of items to the beginning {iters} times.,DequeRange,
AddLastRange (concat),FSharpx.Deque,2.437,10000,3,10000,FSharpx.Deque,"[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]",Adds a collection of items to the end {iters} times.,DequeRange,
AddFirstRange (concat),FSharpx.Deque,2.229,10000,3,10000,FSharpx.Deque,"[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]",Adds a collection of items to the beginning {iters} times.,DequeRange,
Iterate,FSharpx.Deque,0.230,10000,1,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","","",Iteration,
AddLast,FSharpx.Vector,1.208,10000,10000,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","","",DequeSingle,
RemoveLast,FSharpx.Vector,4.381,10000,10000,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","","",DequeSingle,
IEnumerator,FSharpx.Vector,0.150,10000,10000,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","","",Iteration,
Lookup,FSharpx.Vector,0.282,10000,10000,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","",Randomly looks up {iters} items by index from the entire collection.,IndexingSingle,
Update,FSharpx.Vector,5.983,10000,10000,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","",Randomly updates items by index from the entire collection.,IndexingSingle,
AddLastRange,FSharpx.Vector,6.212,10000,3,10000,Array,"[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]",Adds a collection of items to the end {iters} times.,DequeRange,
AddLastRange (concat),FSharpx.Vector,6.604,10000,3,10000,FSharpx.Vector,"[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]",Adds a collection of items to the end {iters} times.,DequeRange,
Iterate,FSharpx.Vector,0.197,10000,1,0,"","[Name = ""Integers by Length""; ElementType = System.Int32; Range = (2, 16)]","","",Iteration,
Union,System.ImmutableSet,49.788,10000,3,10000,System.ImmutableSet,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]",Computes the set-theoretic union with another data structure {iters} times.,SetOperation,
Intersection,System.ImmutableSet,18.279,10000,3,10000,System.ImmutableSet,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]",Computes the set-theoretic intersection with another data structure {iters} times.,SetOperation,
Except,System.ImmutableSet,18.302,10000,3,10000,System.ImmutableSet,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]",Computes the set-theoretic relative complement (or Except) operation.,SetOperation,
Difference,System.ImmutableSet,106.883,10000,3,10000,System.ImmutableSet,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]",Computes the set-theoretic symmetric difference operation.,SetOperation,
IsProperSubset,System.ImmutableSet,14.165,10000,3,10000,System.ImmutableSet,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]",Determines the Subset relation.,SetRelation,
IsProperSuperset,System.ImmutableSet,0.008,10000,3,10000,System.ImmutableSet,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]",Determines the Superset relation.,SetRelation,
SetEquals,System.ImmutableSet,14.092,10000,3,10000,System.ImmutableSet,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","Determines if this set equals another data structure, {iters} times.",SetRelation,
Add,System.ImmutableSet,75.933,10000,3,10000,Array,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","",SetSingle,
Contains,System.ImmutableSet,2.368,10000,10000,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","Determines if a random element of the set is part of it, {iters} times.",SetSingle,
Remove,System.ImmutableSet,14.685,10000,10000,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","",SetSingle,
IEnumerator,System.ImmutableSet,3.737,10000,10000,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","",Iteration,
AddRange,System.ImmutableSet,38.076,10000,3,10000,Array,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","",SetRange,
RemoveRange,System.ImmutableSet,18.173,10000,3,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","",SetRange,Some(0.6)
Iterate,System.ImmutableSet,4.326,10000,1,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","",Iteration,
Union,FSharp.Set,21.080,10000,3,10000,FSharp.Set,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]",Computes the set-theoretic union with another data structure {iters} times.,SetOperation,
Intersection,FSharp.Set,9.833,10000,3,10000,FSharp.Set,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]",Computes the set-theoretic intersection with another data structure {iters} times.,SetOperation,
Except,FSharp.Set,46.464,10000,3,10000,FSharp.Set,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]",Computes the set-theoretic relative complement (or Except) operation.,SetOperation,
Difference,FSharp.Set,118.343,10000,3,10000,FSharp.Set,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]",Computes the set-theoretic symmetric difference operation.,SetOperation,
IsProperSubset,FSharp.Set,0.002,10000,3,10000,FSharp.Set,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]",Determines the Subset relation.,SetRelation,
IsProperSuperset,FSharp.Set,0.002,10000,3,10000,FSharp.Set,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]",Determines the Superset relation.,SetRelation,
SetEquals,FSharp.Set,0.007,10000,3,10000,FSharp.Set,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","Determines if this set equals another data structure, {iters} times.",SetRelation,
Add,FSharp.Set,61.475,10000,3,10000,Array,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","",SetSingle,
Contains,FSharp.Set,3.109,10000,10000,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","Determines if a random element of the set is part of it, {iters} times.",SetSingle,
Remove,FSharp.Set,12.530,10000,10000,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","",SetSingle,
IEnumerator,FSharp.Set,0.605,10000,10000,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","",Iteration,
AddRange,FSharp.Set,61.298,10000,3,10000,Array,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","",SetRange,
RemoveRange,FSharp.Set,25.874,10000,3,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","",SetRange,Some(0.6)
Iterate,FSharp.Set,0.756,10000,1,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","",Iteration,
Union,ImmSet,10.429,10000,3,10000,ImmSet,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]",Computes the set-theoretic union with another data structure {iters} times.,SetOperation,
Intersection,ImmSet,8.105,10000,3,10000,ImmSet,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]",Computes the set-theoretic intersection with another data structure {iters} times.,SetOperation,
Except,ImmSet,7.295,10000,3,10000,ImmSet,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]",Computes the set-theoretic relative complement (or Except) operation.,SetOperation,
Difference,ImmSet,21.722,10000,3,10000,ImmSet,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]",Computes the set-theoretic symmetric difference operation.,SetOperation,
IsProperSubset,ImmSet,0.002,10000,3,10000,ImmSet,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]",Determines the Subset relation.,SetRelation,
IsProperSuperset,ImmSet,0.001,10000,3,10000,ImmSet,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]",Determines the Superset relation.,SetRelation,
SetEquals,ImmSet,0.005,10000,3,10000,ImmSet,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","Determines if this set equals another data structure, {iters} times.",SetRelation,
Add,ImmSet,53.953,10000,3,10000,Array,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","",SetSingle,
Contains,ImmSet,1.773,10000,10000,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","Determines if a random element of the set is part of it, {iters} times.",SetSingle,
Remove,ImmSet,5.979,10000,10000,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","",SetSingle,
IEnumerator,ImmSet,0.984,10000,10000,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","",Iteration,
AddRange,ImmSet,21.787,10000,3,10000,Array,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","",SetRange,
RemoveRange,ImmSet,9.274,10000,3,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","",SetRange,Some(0.6)
Iterate,ImmSet,0.250,10000,1,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","",Iteration,
Union,ImmOrderedSet,17.640,10000,3,10000,ImmOrderedSet,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]",Computes the set-theoretic union with another data structure {iters} times.,SetOperation,
Intersection,ImmOrderedSet,36.875,10000,3,10000,ImmOrderedSet,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]",Computes the set-theoretic intersection with another data structure {iters} times.,SetOperation,
Except,ImmOrderedSet,16.212,10000,3,10000,ImmOrderedSet,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]",Computes the set-theoretic relative complement (or Except) operation.,SetOperation,
Difference,ImmOrderedSet,47.394,10000,3,10000,ImmOrderedSet,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]",Computes the set-theoretic symmetric difference operation.,SetOperation,
IsProperSubset,ImmOrderedSet,0.002,10000,3,10000,ImmOrderedSet,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]",Determines the Subset relation.,SetRelation,
IsProperSuperset,ImmOrderedSet,0.001,10000,3,10000,ImmOrderedSet,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]",Determines the Superset relation.,SetRelation,
SetEquals,ImmOrderedSet,0.006,10000,3,10000,ImmOrderedSet,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","Determines if this set equals another data structure, {iters} times.",SetRelation,
Add,ImmOrderedSet,109.294,10000,3,10000,Array,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","",SetSingle,
Contains,ImmOrderedSet,15.481,10000,10000,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","Determines if a random element of the set is part of it, {iters} times.",SetSingle,
Remove,ImmOrderedSet,20.646,10000,10000,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","",SetSingle,
IEnumerator,ImmOrderedSet,0.780,10000,10000,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","",Iteration,
AddRange,ImmOrderedSet,60.933,10000,3,10000,Array,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","",SetRange,
RemoveRange,ImmOrderedSet,33.550,10000,3,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","",SetRange,Some(0.6)
Iterate,ImmOrderedSet,0.120,10000,1,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","",Iteration,
Union,System.ImmutableSortedSet,91.959,10000,3,10000,System.ImmutableSortedSet,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]",Computes the set-theoretic union with another data structure {iters} times.,SetOperation,
Intersection,System.ImmutableSortedSet,65.854,10000,3,10000,System.ImmutableSortedSet,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]",Computes the set-theoretic intersection with another data structure {iters} times.,SetOperation,
Except,System.ImmutableSortedSet,74.829,10000,3,10000,System.ImmutableSortedSet,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]",Computes the set-theoretic relative complement (or Except) operation.,SetOperation,
Difference,System.ImmutableSortedSet,306.202,10000,3,10000,System.ImmutableSortedSet,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]",Computes the set-theoretic symmetric difference operation.,SetOperation,
IsProperSubset,System.ImmutableSortedSet,50.431,10000,3,10000,System.ImmutableSortedSet,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]",Determines the Subset relation.,SetRelation,
IsProperSuperset,System.ImmutableSortedSet,0.019,10000,3,10000,System.ImmutableSortedSet,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]",Determines the Superset relation.,SetRelation,
SetEquals,System.ImmutableSortedSet,49.866,10000,3,10000,System.ImmutableSortedSet,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","Determines if this set equals another data structure, {iters} times.",SetRelation,
Add,System.ImmutableSortedSet,100.757,10000,3,10000,Array,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","",SetSingle,
Contains,System.ImmutableSortedSet,17.452,10000,10000,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","Determines if a random element of the set is part of it, {iters} times.",SetSingle,
Remove,System.ImmutableSortedSet,24.725,10000,10000,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","",SetSingle,
IEnumerator,System.ImmutableSortedSet,2.424,10000,10000,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","",Iteration,
AddRange,System.ImmutableSortedSet,79.588,10000,3,10000,Array,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","",SetRange,
RemoveRange,System.ImmutableSortedSet,40.408,10000,3,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","",SetRange,Some(0.6)
Iterate,System.ImmutableSortedSet,2.956,10000,1,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","",Iteration,
Lookup,ImmMap,1.837,10000,10000,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","",MapSingle,
IEnumerator,ImmMap,0.845,10000,10000,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","",Iteration,
RemoveKey,ImmMap,9.445,10000,10000,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","",MapSingle,
Add,ImmMap,57.989,10000,3,10000,Array,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","",MapSingle,
Iterate,ImmMap,0.414,10000,1,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","",Iteration,
AddRange,ImmMap,25.130,10000,3,10000,Array,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.Collections.Generic.KeyValuePair`2[System.String,System.String]]","",MapRange,
RemoveRange,ImmMap,9.499,10000,3,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","",MapRange,Some(0.6)
Lookup,System.ImmutableDict,2.702,10000,10000,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","",MapSingle,
IEnumerator,System.ImmutableDict,3.819,10000,10000,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","",Iteration,
RemoveKey,System.ImmutableDict,23.377,10000,10000,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","",MapSingle,
Add,System.ImmutableDict,99.958,10000,3,10000,Array,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","",MapSingle,
Iterate,System.ImmutableDict,4.351,10000,1,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","",Iteration,
AddRange,System.ImmutableDict,47.393,10000,3,10000,Array,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.Collections.Generic.KeyValuePair`2[System.String,System.String]]","",MapRange,
RemoveRange,System.ImmutableDict,20.237,10000,3,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","",MapRange,Some(0.6)
Lookup,FSharp.Map,3.266,10000,10000,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","",MapSingle,
IEnumerator,FSharp.Map,0.648,10000,10000,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","",Iteration,
RemoveKey,FSharp.Map,13.633,10000,10000,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","",MapSingle,
Add,FSharp.Map,63.886,10000,3,10000,Array,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","",MapSingle,
Iterate,FSharp.Map,0.823,10000,1,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","",Iteration,
AddRange,FSharp.Map,63.895,10000,3,10000,Array,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.Collections.Generic.KeyValuePair`2[System.String,System.String]]","",MapRange,
RemoveRange,FSharp.Map,28.199,10000,3,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","",MapRange,Some(0.6)
Lookup,System.ImmutableSortedDict,15.630,10000,10000,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","",MapSingle,
IEnumerator,System.ImmutableSortedDict,2.084,10000,10000,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","",Iteration,
RemoveKey,System.ImmutableSortedDict,28.808,10000,10000,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","",MapSingle,
Add,System.ImmutableSortedDict,101.172,10000,3,10000,Array,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","",MapSingle,
Iterate,System.ImmutableSortedDict,2.674,10000,1,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","",Iteration,
AddRange,System.ImmutableSortedDict,75.326,10000,3,10000,Array,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.Collections.Generic.KeyValuePair`2[System.String,System.String]]","",MapRange,
RemoveRange,System.ImmutableSortedDict,42.563,10000,3,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","",MapRange,Some(0.6)
Lookup,ImmOrderedMap,15.430,10000,10000,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","",MapSingle,
IEnumerator,ImmOrderedMap,0.664,10000,10000,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","",Iteration,
RemoveKey,ImmOrderedMap,22.604,10000,10000,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","",MapSingle,
Add,ImmOrderedMap,100.089,10000,3,10000,Array,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","",MapSingle,
Iterate,ImmOrderedMap,0.270,10000,1,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","",Iteration,
AddRange,ImmOrderedMap,68.299,10000,3,10000,Array,"[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","[Name = ""Unique Strings of Letters by Length""; ElementType = System.Collections.Generic.KeyValuePair`2[System.String,System.String]]","",MapRange,
RemoveRange,ImmOrderedMap,33.056,10000,3,0,"","[Name = ""Unique Strings of Letters by Length""; ElementType = System.String; Range = (1, 10)]","","",MapRange,Some(0.6)
